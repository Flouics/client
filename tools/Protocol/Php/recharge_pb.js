/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.recharge.AlipayVersionRequest');
goog.provide('proto.recharge.AlipayVersionResponse');
goog.provide('proto.recharge.BindIdRequest');
goog.provide('proto.recharge.BindIdResponse');
goog.provide('proto.recharge.IOSAlipayVersionResponse');
goog.provide('proto.recharge.PayHeartbeatRequest');
goog.provide('proto.recharge.PayHeartbeatResponse');
goog.provide('proto.recharge.PayResponse');
goog.provide('proto.recharge.PayWechatVersionRequest');
goog.provide('proto.recharge.PayWechatVersionResponse');
goog.provide('proto.recharge.ShoppingItem');
goog.provide('proto.recharge.ShoppingItemData');
goog.provide('proto.recharge.ShoppingListRequest');
goog.provide('proto.recharge.ShoppingListResponse');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.ShoppingListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recharge.ShoppingListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.ShoppingListRequest.displayName = 'proto.recharge.ShoppingListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.ShoppingListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.ShoppingListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.ShoppingListRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.ShoppingListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    appId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.ShoppingListRequest}
 */
proto.recharge.ShoppingListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.ShoppingListRequest;
  return proto.recharge.ShoppingListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.ShoppingListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.ShoppingListRequest}
 */
proto.recharge.ShoppingListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSystemType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.ShoppingListRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.ShoppingListRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.ShoppingListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.ShoppingListRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSystemType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 system_type = 1;
 * @return {number}
 */
proto.recharge.ShoppingListRequest.prototype.getSystemType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.recharge.ShoppingListRequest.prototype.setSystemType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 app_id = 2;
 * @return {number}
 */
proto.recharge.ShoppingListRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.recharge.ShoppingListRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.ShoppingItemData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recharge.ShoppingItemData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.ShoppingItemData.displayName = 'proto.recharge.ShoppingItemData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.ShoppingItemData.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.ShoppingItemData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.ShoppingItemData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.ShoppingItemData.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    gold0: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gold1: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gold: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.ShoppingItemData}
 */
proto.recharge.ShoppingItemData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.ShoppingItemData;
  return proto.recharge.ShoppingItemData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.ShoppingItemData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.ShoppingItemData}
 */
proto.recharge.ShoppingItemData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGold0(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGold1(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.ShoppingItemData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.ShoppingItemData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.ShoppingItemData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.ShoppingItemData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getGold0();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getGold1();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getGold();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional float amount = 1;
 * @return {number}
 */
proto.recharge.ShoppingItemData.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.recharge.ShoppingItemData.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 gold_0 = 2;
 * @return {number}
 */
proto.recharge.ShoppingItemData.prototype.getGold0 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.recharge.ShoppingItemData.prototype.setGold0 = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 gold_1 = 3;
 * @return {number}
 */
proto.recharge.ShoppingItemData.prototype.getGold1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.recharge.ShoppingItemData.prototype.setGold1 = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 gold = 4;
 * @return {number}
 */
proto.recharge.ShoppingItemData.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.recharge.ShoppingItemData.prototype.setGold = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.ShoppingItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.recharge.ShoppingItem.repeatedFields_, null);
};
goog.inherits(proto.recharge.ShoppingItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.ShoppingItem.displayName = 'proto.recharge.ShoppingItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.recharge.ShoppingItem.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.ShoppingItem.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.ShoppingItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.ShoppingItem} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.ShoppingItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    itemDataList: jspb.Message.toObjectList(msg.getItemDataList(),
    proto.recharge.ShoppingItemData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.ShoppingItem}
 */
proto.recharge.ShoppingItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.ShoppingItem;
  return proto.recharge.ShoppingItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.ShoppingItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.ShoppingItem}
 */
proto.recharge.ShoppingItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.recharge.ShoppingItemData;
      reader.readMessage(value,proto.recharge.ShoppingItemData.deserializeBinaryFromReader);
      msg.addItemData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.ShoppingItem} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.ShoppingItem.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.ShoppingItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.ShoppingItem.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getItemDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.recharge.ShoppingItemData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.recharge.ShoppingItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.recharge.ShoppingItem.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated ShoppingItemData item_data = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.recharge.ShoppingItemData>}
 */
proto.recharge.ShoppingItem.prototype.getItemDataList = function() {
  return /** @type{!Array.<!proto.recharge.ShoppingItemData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.recharge.ShoppingItemData, 2));
};


/** @param {!Array.<!proto.recharge.ShoppingItemData>} value */
proto.recharge.ShoppingItem.prototype.setItemDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.recharge.ShoppingItemData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.recharge.ShoppingItemData}
 */
proto.recharge.ShoppingItem.prototype.addItemData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.recharge.ShoppingItemData, opt_index);
};


proto.recharge.ShoppingItem.prototype.clearItemDataList = function() {
  this.setItemDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.ShoppingListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.recharge.ShoppingListResponse.repeatedFields_, null);
};
goog.inherits(proto.recharge.ShoppingListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.ShoppingListResponse.displayName = 'proto.recharge.ShoppingListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.recharge.ShoppingListResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.ShoppingListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.ShoppingListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.ShoppingListResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.ShoppingListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    shoppingItemList: jspb.Message.toObjectList(msg.getShoppingItemList(),
    proto.recharge.ShoppingItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.ShoppingListResponse}
 */
proto.recharge.ShoppingListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.ShoppingListResponse;
  return proto.recharge.ShoppingListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.ShoppingListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.ShoppingListResponse}
 */
proto.recharge.ShoppingListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.recharge.ShoppingItem;
      reader.readMessage(value,proto.recharge.ShoppingItem.deserializeBinaryFromReader);
      msg.addShoppingItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.ShoppingListResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.ShoppingListResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.ShoppingListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.ShoppingListResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getShoppingItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.recharge.ShoppingItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.recharge.ShoppingListResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.recharge.ShoppingListResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated ShoppingItem shopping_item = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.recharge.ShoppingItem>}
 */
proto.recharge.ShoppingListResponse.prototype.getShoppingItemList = function() {
  return /** @type{!Array.<!proto.recharge.ShoppingItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.recharge.ShoppingItem, 2));
};


/** @param {!Array.<!proto.recharge.ShoppingItem>} value */
proto.recharge.ShoppingListResponse.prototype.setShoppingItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.recharge.ShoppingItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.recharge.ShoppingItem}
 */
proto.recharge.ShoppingListResponse.prototype.addShoppingItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.recharge.ShoppingItem, opt_index);
};


proto.recharge.ShoppingListResponse.prototype.clearShoppingItemList = function() {
  this.setShoppingItemList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.PayWechatVersionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recharge.PayWechatVersionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.PayWechatVersionRequest.displayName = 'proto.recharge.PayWechatVersionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.PayWechatVersionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.PayWechatVersionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.PayWechatVersionRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.PayWechatVersionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    pfId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    appId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.PayWechatVersionRequest}
 */
proto.recharge.PayWechatVersionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.PayWechatVersionRequest;
  return proto.recharge.PayWechatVersionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.PayWechatVersionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.PayWechatVersionRequest}
 */
proto.recharge.PayWechatVersionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPfId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.PayWechatVersionRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.PayWechatVersionRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.PayWechatVersionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.PayWechatVersionRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getPfId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional float amount = 1;
 * @return {number}
 */
proto.recharge.PayWechatVersionRequest.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.recharge.PayWechatVersionRequest.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 pf_id = 2;
 * @return {number}
 */
proto.recharge.PayWechatVersionRequest.prototype.getPfId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.recharge.PayWechatVersionRequest.prototype.setPfId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string uid = 3;
 * @return {string}
 */
proto.recharge.PayWechatVersionRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.recharge.PayWechatVersionRequest.prototype.setUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 app_id = 4;
 * @return {number}
 */
proto.recharge.PayWechatVersionRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.recharge.PayWechatVersionRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.PayResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recharge.PayResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.PayResponse.displayName = 'proto.recharge.PayResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.PayResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.PayResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.PayResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.PayResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getFieldWithDefault(msg, 2, ""),
    payType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.PayResponse}
 */
proto.recharge.PayResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.PayResponse;
  return proto.recharge.PayResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.PayResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.PayResponse}
 */
proto.recharge.PayResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPayType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.PayResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.PayResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.PayResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.PayResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getResult();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPayType();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.recharge.PayResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.recharge.PayResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string result = 2;
 * @return {string}
 */
proto.recharge.PayResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.recharge.PayResponse.prototype.setResult = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 pay_type = 3;
 * @return {number}
 */
proto.recharge.PayResponse.prototype.getPayType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.recharge.PayResponse.prototype.setPayType = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.PayWechatVersionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recharge.PayWechatVersionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.PayWechatVersionResponse.displayName = 'proto.recharge.PayWechatVersionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.PayWechatVersionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.PayWechatVersionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.PayWechatVersionResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.PayWechatVersionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.PayWechatVersionResponse}
 */
proto.recharge.PayWechatVersionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.PayWechatVersionResponse;
  return proto.recharge.PayWechatVersionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.PayWechatVersionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.PayWechatVersionResponse}
 */
proto.recharge.PayWechatVersionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.PayWechatVersionResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.PayWechatVersionResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.PayWechatVersionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.PayWechatVersionResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getResult();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.recharge.PayWechatVersionResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.recharge.PayWechatVersionResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string result = 2;
 * @return {string}
 */
proto.recharge.PayWechatVersionResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.recharge.PayWechatVersionResponse.prototype.setResult = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.AlipayVersionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recharge.AlipayVersionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.AlipayVersionRequest.displayName = 'proto.recharge.AlipayVersionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.AlipayVersionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.AlipayVersionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.AlipayVersionRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.AlipayVersionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    pfId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    appId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.AlipayVersionRequest}
 */
proto.recharge.AlipayVersionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.AlipayVersionRequest;
  return proto.recharge.AlipayVersionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.AlipayVersionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.AlipayVersionRequest}
 */
proto.recharge.AlipayVersionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPfId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.AlipayVersionRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.AlipayVersionRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.AlipayVersionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.AlipayVersionRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getPfId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional float amount = 1;
 * @return {number}
 */
proto.recharge.AlipayVersionRequest.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.recharge.AlipayVersionRequest.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 pf_id = 2;
 * @return {number}
 */
proto.recharge.AlipayVersionRequest.prototype.getPfId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.recharge.AlipayVersionRequest.prototype.setPfId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string uid = 3;
 * @return {string}
 */
proto.recharge.AlipayVersionRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.recharge.AlipayVersionRequest.prototype.setUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 app_id = 4;
 * @return {number}
 */
proto.recharge.AlipayVersionRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.recharge.AlipayVersionRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.AlipayVersionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recharge.AlipayVersionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.AlipayVersionResponse.displayName = 'proto.recharge.AlipayVersionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.AlipayVersionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.AlipayVersionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.AlipayVersionResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.AlipayVersionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    alipayReq: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.AlipayVersionResponse}
 */
proto.recharge.AlipayVersionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.AlipayVersionResponse;
  return proto.recharge.AlipayVersionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.AlipayVersionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.AlipayVersionResponse}
 */
proto.recharge.AlipayVersionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlipayReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.AlipayVersionResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.AlipayVersionResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.AlipayVersionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.AlipayVersionResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAlipayReq();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.recharge.AlipayVersionResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.recharge.AlipayVersionResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string alipay_req = 2;
 * @return {string}
 */
proto.recharge.AlipayVersionResponse.prototype.getAlipayReq = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.recharge.AlipayVersionResponse.prototype.setAlipayReq = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.IOSAlipayVersionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recharge.IOSAlipayVersionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.IOSAlipayVersionResponse.displayName = 'proto.recharge.IOSAlipayVersionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.IOSAlipayVersionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.IOSAlipayVersionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.IOSAlipayVersionResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.IOSAlipayVersionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    orderNumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    goodsName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    details: jspb.Message.getFieldWithDefault(msg, 4, ""),
    price: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    callback: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.IOSAlipayVersionResponse}
 */
proto.recharge.IOSAlipayVersionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.IOSAlipayVersionResponse;
  return proto.recharge.IOSAlipayVersionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.IOSAlipayVersionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.IOSAlipayVersionResponse}
 */
proto.recharge.IOSAlipayVersionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoodsName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallback(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.IOSAlipayVersionResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.IOSAlipayVersionResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.IOSAlipayVersionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.IOSAlipayVersionResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getOrderNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getGoodsName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getDetails();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = this.getCallback();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.recharge.IOSAlipayVersionResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.recharge.IOSAlipayVersionResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string order_number = 2;
 * @return {string}
 */
proto.recharge.IOSAlipayVersionResponse.prototype.getOrderNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.recharge.IOSAlipayVersionResponse.prototype.setOrderNumber = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string goods_name = 3;
 * @return {string}
 */
proto.recharge.IOSAlipayVersionResponse.prototype.getGoodsName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.recharge.IOSAlipayVersionResponse.prototype.setGoodsName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string details = 4;
 * @return {string}
 */
proto.recharge.IOSAlipayVersionResponse.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.recharge.IOSAlipayVersionResponse.prototype.setDetails = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float price = 5;
 * @return {number}
 */
proto.recharge.IOSAlipayVersionResponse.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.recharge.IOSAlipayVersionResponse.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string callback = 6;
 * @return {string}
 */
proto.recharge.IOSAlipayVersionResponse.prototype.getCallback = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.recharge.IOSAlipayVersionResponse.prototype.setCallback = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.PayHeartbeatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recharge.PayHeartbeatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.PayHeartbeatRequest.displayName = 'proto.recharge.PayHeartbeatRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.PayHeartbeatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.PayHeartbeatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.PayHeartbeatRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.PayHeartbeatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderNumber: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.PayHeartbeatRequest}
 */
proto.recharge.PayHeartbeatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.PayHeartbeatRequest;
  return proto.recharge.PayHeartbeatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.PayHeartbeatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.PayHeartbeatRequest}
 */
proto.recharge.PayHeartbeatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.PayHeartbeatRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.PayHeartbeatRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.PayHeartbeatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.PayHeartbeatRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrderNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string order_number = 1;
 * @return {string}
 */
proto.recharge.PayHeartbeatRequest.prototype.getOrderNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.recharge.PayHeartbeatRequest.prototype.setOrderNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.PayHeartbeatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recharge.PayHeartbeatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.PayHeartbeatResponse.displayName = 'proto.recharge.PayHeartbeatResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.PayHeartbeatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.PayHeartbeatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.PayHeartbeatResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.PayHeartbeatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.PayHeartbeatResponse}
 */
proto.recharge.PayHeartbeatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.PayHeartbeatResponse;
  return proto.recharge.PayHeartbeatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.PayHeartbeatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.PayHeartbeatResponse}
 */
proto.recharge.PayHeartbeatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.PayHeartbeatResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.PayHeartbeatResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.PayHeartbeatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.PayHeartbeatResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.recharge.PayHeartbeatResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.recharge.PayHeartbeatResponse.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.BindIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recharge.BindIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.BindIdRequest.displayName = 'proto.recharge.BindIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.BindIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.BindIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.BindIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.BindIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    aid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.BindIdRequest}
 */
proto.recharge.BindIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.BindIdRequest;
  return proto.recharge.BindIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.BindIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.BindIdRequest}
 */
proto.recharge.BindIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.BindIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.BindIdRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.BindIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.BindIdRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 aid = 1;
 * @return {number}
 */
proto.recharge.BindIdRequest.prototype.getAid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.recharge.BindIdRequest.prototype.setAid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.recharge.BindIdRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.recharge.BindIdRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 app_id = 3;
 * @return {number}
 */
proto.recharge.BindIdRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.recharge.BindIdRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.recharge.BindIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.recharge.BindIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.recharge.BindIdResponse.displayName = 'proto.recharge.BindIdResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.recharge.BindIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.recharge.BindIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.recharge.BindIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.recharge.BindIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    agentId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    giftGold: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.recharge.BindIdResponse}
 */
proto.recharge.BindIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.recharge.BindIdResponse;
  return proto.recharge.BindIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.recharge.BindIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.recharge.BindIdResponse}
 */
proto.recharge.BindIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAgentId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGiftGold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.recharge.BindIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.BindIdResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.recharge.BindIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.recharge.BindIdResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAgentId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getGiftGold();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.recharge.BindIdResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.recharge.BindIdResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 agent_id = 2;
 * @return {number}
 */
proto.recharge.BindIdResponse.prototype.getAgentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.recharge.BindIdResponse.prototype.setAgentId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float gift_gold = 3;
 * @return {number}
 */
proto.recharge.BindIdResponse.prototype.getGiftGold = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.recharge.BindIdResponse.prototype.setGiftGold = function(value) {
  jspb.Message.setField(this, 3, value);
};


