/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.login.BuyShopItemRequest');
goog.provide('proto.login.BuyShopItemResponse');
goog.provide('proto.login.CacRecordRequest');
goog.provide('proto.login.CacRecordResponse');
goog.provide('proto.login.CacRoomInfo');
goog.provide('proto.login.CacRoomInfoRequest');
goog.provide('proto.login.CacRoomInfoResponse');
goog.provide('proto.login.CacRoomListRequest');
goog.provide('proto.login.CacRoomListResponse');
goog.provide('proto.login.CacRoomStateRequest');
goog.provide('proto.login.CacRoomStateResponse');
goog.provide('proto.login.CheckVersionRequest');
goog.provide('proto.login.CheckVersionResponse');
goog.provide('proto.login.CreateCacRoomRequest');
goog.provide('proto.login.CreateCacRoomResponse');
goog.provide('proto.login.CreateRoomRequest');
goog.provide('proto.login.ExistRoomW2WRequest');
goog.provide('proto.login.ExistRoomW2WResponse');
goog.provide('proto.login.ExistRoomWebRequest');
goog.provide('proto.login.ExistRoomWebResponse');
goog.provide('proto.login.GetLoginGiftRequest');
goog.provide('proto.login.GetLoginGiftResponse');
goog.provide('proto.login.GetMailListRequest');
goog.provide('proto.login.GetMailListResponse');
goog.provide('proto.login.GetMailListResponse.MailData');
goog.provide('proto.login.GetMailRewardRequest');
goog.provide('proto.login.GetMailRewardResponse');
goog.provide('proto.login.GetMailRewardResponse.RewardData');
goog.provide('proto.login.GetSendGiftCDListRequest');
goog.provide('proto.login.GetSendGiftCDListResponse');
goog.provide('proto.login.GetSendGiftCDListResponse.SendGiftCDData');
goog.provide('proto.login.GetUserInfoRequest');
goog.provide('proto.login.GetUserInfoResponse');
goog.provide('proto.login.HallEnterRequest');
goog.provide('proto.login.HallEnterResponse');
goog.provide('proto.login.HallEnterW2WRequest');
goog.provide('proto.login.HallEnterW2WResponse');
goog.provide('proto.login.HallViewRequest');
goog.provide('proto.login.HallViewResponse');
goog.provide('proto.login.HallViewResponse.TableLevelInfo');
goog.provide('proto.login.HeartbeatRequest');
goog.provide('proto.login.HeartbeatResponse');
goog.provide('proto.login.InvitationInfoRequest');
goog.provide('proto.login.InvitationInfoResponse');
goog.provide('proto.login.JoinCacRequest');
goog.provide('proto.login.JoinCacResponse');
goog.provide('proto.login.LoginRequest');
goog.provide('proto.login.LoginResponse');
goog.provide('proto.login.MyCacRoom');
goog.provide('proto.login.MyCacRoomListRequest');
goog.provide('proto.login.MyCacRoomListResponse');
goog.provide('proto.login.RecordInfo');
goog.provide('proto.login.RecordInfoRequest');
goog.provide('proto.login.RecordInfoResponse');
goog.provide('proto.login.RecordItemData');
goog.provide('proto.login.RecordListRequest');
goog.provide('proto.login.RecordListResponse');
goog.provide('proto.login.RefundWebResponse');
goog.provide('proto.login.ReplayRequest');
goog.provide('proto.login.ReplayResponse');
goog.provide('proto.login.RoomConfigRequest');
goog.provide('proto.login.RoomConfigResponse');
goog.provide('proto.login.RoomCreateRequest');
goog.provide('proto.login.RoomCreateResponse');
goog.provide('proto.login.RoomCreateW2WRequest');
goog.provide('proto.login.RoomCreateW2WResponse');
goog.provide('proto.login.RoomEnterRequest');
goog.provide('proto.login.RoomEnterResponse');
goog.provide('proto.login.RoomEnterW2WRequest');
goog.provide('proto.login.RoomEnterW2WResponse');
goog.provide('proto.login.RoomItemData');
goog.provide('proto.login.RoomListRequest');
goog.provide('proto.login.RoomListResponse');
goog.provide('proto.login.RoomListUser');
goog.provide('proto.login.RoomListW2WRequest');
goog.provide('proto.login.RoomListW2WResponse');
goog.provide('proto.login.RoomReplayRequest');
goog.provide('proto.login.SendOtherUserGiftRequest');
goog.provide('proto.login.SendOtherUserGiftResponse');
goog.provide('proto.login.SendSmsCodeRequest');
goog.provide('proto.login.SendSmsCodeResponse');
goog.provide('proto.login.SmsVerificationRequest');
goog.provide('proto.login.SmsVerificationResponse');
goog.provide('proto.login.UserBalanceRequest');
goog.provide('proto.login.UserBalanceResponse');
goog.provide('proto.login.UserInGameW2WRequest');
goog.provide('proto.login.UserInGameW2WResponse');
goog.provide('proto.login.UserRecord');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CheckVersionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CheckVersionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CheckVersionRequest.displayName = 'proto.login.CheckVersionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CheckVersionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CheckVersionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CheckVersionRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CheckVersionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    verId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CheckVersionRequest}
 */
proto.login.CheckVersionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CheckVersionRequest;
  return proto.login.CheckVersionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CheckVersionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CheckVersionRequest}
 */
proto.login.CheckVersionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CheckVersionRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CheckVersionRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CheckVersionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CheckVersionRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getVerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.CheckVersionRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CheckVersionRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string ver_id = 2;
 * @return {string}
 */
proto.login.CheckVersionRequest.prototype.getVerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.CheckVersionRequest.prototype.setVerId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 p_id = 3;
 * @return {number}
 */
proto.login.CheckVersionRequest.prototype.getPId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.CheckVersionRequest.prototype.setPId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CheckVersionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CheckVersionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CheckVersionResponse.displayName = 'proto.login.CheckVersionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CheckVersionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CheckVersionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CheckVersionResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CheckVersionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mandatoryUpdate: jspb.Message.getFieldWithDefault(msg, 2, false),
    appstoreUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    yybUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    apkUrl: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CheckVersionResponse}
 */
proto.login.CheckVersionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CheckVersionResponse;
  return proto.login.CheckVersionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CheckVersionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CheckVersionResponse}
 */
proto.login.CheckVersionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMandatoryUpdate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppstoreUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setYybUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setApkUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CheckVersionResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CheckVersionResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CheckVersionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CheckVersionResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getMandatoryUpdate();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getAppstoreUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getYybUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getApkUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.CheckVersionResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CheckVersionResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool mandatory_update = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.login.CheckVersionResponse.prototype.getMandatoryUpdate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.login.CheckVersionResponse.prototype.setMandatoryUpdate = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string appstore_url = 3;
 * @return {string}
 */
proto.login.CheckVersionResponse.prototype.getAppstoreUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.CheckVersionResponse.prototype.setAppstoreUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string yyb_url = 4;
 * @return {string}
 */
proto.login.CheckVersionResponse.prototype.getYybUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.CheckVersionResponse.prototype.setYybUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string apk_url = 5;
 * @return {string}
 */
proto.login.CheckVersionResponse.prototype.getApkUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.login.CheckVersionResponse.prototype.setApkUrl = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.LoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.LoginRequest.displayName = 'proto.login.LoginRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.LoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.LoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.LoginRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.LoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    openId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    appId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    openKey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    verId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    location: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.LoginRequest}
 */
proto.login.LoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.LoginRequest;
  return proto.login.LoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.LoginRequest}
 */
proto.login.LoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenKey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.LoginRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.LoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.LoginRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOpenId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getOpenKey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getVerId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getLocation();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string open_id = 1;
 * @return {string}
 */
proto.login.LoginRequest.prototype.getOpenId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.login.LoginRequest.prototype.setOpenId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 channel = 2;
 * @return {number}
 */
proto.login.LoginRequest.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.LoginRequest.prototype.setChannel = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 app_id = 3;
 * @return {number}
 */
proto.login.LoginRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.LoginRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string open_key = 5;
 * @return {string}
 */
proto.login.LoginRequest.prototype.getOpenKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.login.LoginRequest.prototype.setOpenKey = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string device_id = 6;
 * @return {string}
 */
proto.login.LoginRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.login.LoginRequest.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string ver_id = 7;
 * @return {string}
 */
proto.login.LoginRequest.prototype.getVerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.login.LoginRequest.prototype.setVerId = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string location = 8;
 * @return {string}
 */
proto.login.LoginRequest.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.login.LoginRequest.prototype.setLocation = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.LoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.LoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.LoginResponse.displayName = 'proto.login.LoginResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.LoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.LoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.LoginResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.LoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    unick: jspb.Message.getFieldWithDefault(msg, 2, ""),
    olkey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gold: jspb.Message.getFieldWithDefault(msg, 4, 0),
    diamond: jspb.Message.getFieldWithDefault(msg, 5, 0),
    level: jspb.Message.getFieldWithDefault(msg, 6, 0),
    exp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    gender: jspb.Message.getFieldWithDefault(msg, 8, 0),
    aid: jspb.Message.getFieldWithDefault(msg, 9, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    avatarUrl: jspb.Message.getFieldWithDefault(msg, 11, ""),
    registered: jspb.Message.getFieldWithDefault(msg, 12, false),
    score: jspb.Message.getFieldWithDefault(msg, 13, 0),
    parentId: jspb.Message.getFieldWithDefault(msg, 14, 0),
    ip: jspb.Message.getFieldWithDefault(msg, 15, ""),
    location: jspb.Message.getFieldWithDefault(msg, 16, ""),
    isMaintain: jspb.Message.getFieldWithDefault(msg, 17, false),
    maintainInfo: jspb.Message.getFieldWithDefault(msg, 18, ""),
    notice: jspb.Message.getFieldWithDefault(msg, 19, ""),
    iapVerifyUrl: jspb.Message.getFieldWithDefault(msg, 20, ""),
    shareIco: jspb.Message.getFieldWithDefault(msg, 21, ""),
    shareUrl: jspb.Message.getFieldWithDefault(msg, 22, ""),
    battleCounts: jspb.Message.getFieldWithDefault(msg, 23, 0),
    battleWin: jspb.Message.getFieldWithDefault(msg, 24, 0),
    continueWin: jspb.Message.getFieldWithDefault(msg, 25, 0),
    continueLogin: jspb.Message.getFieldWithDefault(msg, 26, 0),
    userReconnection: jspb.Message.getFieldWithDefault(msg, 27, false),
    userRoomId: jspb.Message.getFieldWithDefault(msg, 28, 0),
    userServerIp: jspb.Message.getFieldWithDefault(msg, 29, ""),
    userServerPort: jspb.Message.getFieldWithDefault(msg, 30, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 31, 0),
    isBlack: jspb.Message.getFieldWithDefault(msg, 32, 0),
    updateDomain: jspb.Message.getFieldWithDefault(msg, 33, ""),
    loginDomain: jspb.Message.getFieldWithDefault(msg, 34, ""),
    payDomain: jspb.Message.getFieldWithDefault(msg, 35, ""),
    matchId: jspb.Message.getFieldWithDefault(msg, 36, 0),
    matchServerIp: jspb.Message.getFieldWithDefault(msg, 37, ""),
    matchServerPort: jspb.Message.getFieldWithDefault(msg, 38, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.LoginResponse}
 */
proto.login.LoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.LoginResponse;
  return proto.login.LoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.LoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.LoginResponse}
 */
proto.login.LoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnick(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOlkey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGold(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiamond(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLevel(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGender(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRegistered(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParentId(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsMaintain(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaintainInfo(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotice(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setIapVerifyUrl(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setShareIco(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setShareUrl(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattleCounts(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattleWin(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContinueWin(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContinueLogin(value);
      break;
    case 27:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserReconnection(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserRoomId(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserServerIp(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserServerPort(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameId(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIsBlack(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdateDomain(value);
      break;
    case 34:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoginDomain(value);
      break;
    case 35:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayDomain(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMatchId(value);
      break;
    case 37:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchServerIp(value);
      break;
    case 38:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMatchServerPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.LoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.LoginResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.LoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.LoginResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUnick();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getOlkey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getGold();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getDiamond();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getLevel();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getExp();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getGender();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = this.getAid();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getAvatarUrl();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getRegistered();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = this.getScore();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = this.getParentId();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = this.getIp();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = this.getLocation();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = this.getIsMaintain();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = this.getMaintainInfo();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = this.getNotice();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = this.getIapVerifyUrl();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = this.getShareIco();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = this.getShareUrl();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = this.getBattleCounts();
  if (f !== 0) {
    writer.writeUint32(
      23,
      f
    );
  }
  f = this.getBattleWin();
  if (f !== 0) {
    writer.writeUint32(
      24,
      f
    );
  }
  f = this.getContinueWin();
  if (f !== 0) {
    writer.writeUint32(
      25,
      f
    );
  }
  f = this.getContinueLogin();
  if (f !== 0) {
    writer.writeUint32(
      26,
      f
    );
  }
  f = this.getUserReconnection();
  if (f) {
    writer.writeBool(
      27,
      f
    );
  }
  f = this.getUserRoomId();
  if (f !== 0) {
    writer.writeUint32(
      28,
      f
    );
  }
  f = this.getUserServerIp();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
  f = this.getUserServerPort();
  if (f !== 0) {
    writer.writeInt32(
      30,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeInt32(
      31,
      f
    );
  }
  f = this.getIsBlack();
  if (f !== 0) {
    writer.writeUint32(
      32,
      f
    );
  }
  f = this.getUpdateDomain();
  if (f.length > 0) {
    writer.writeString(
      33,
      f
    );
  }
  f = this.getLoginDomain();
  if (f.length > 0) {
    writer.writeString(
      34,
      f
    );
  }
  f = this.getPayDomain();
  if (f.length > 0) {
    writer.writeString(
      35,
      f
    );
  }
  f = this.getMatchId();
  if (f !== 0) {
    writer.writeInt32(
      36,
      f
    );
  }
  f = this.getMatchServerIp();
  if (f.length > 0) {
    writer.writeString(
      37,
      f
    );
  }
  f = this.getMatchServerPort();
  if (f !== 0) {
    writer.writeInt32(
      38,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string unick = 2;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getUnick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setUnick = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string olkey = 3;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getOlkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setOlkey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 gold = 4;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setGold = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 diamond = 5;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setDiamond = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 level = 6;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 exp = 7;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setExp = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 gender = 8;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setGender = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 aid = 9;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getAid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setAid = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string user_id = 10;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string avatar_url = 11;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bool registered = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.login.LoginResponse.prototype.getRegistered = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.login.LoginResponse.prototype.setRegistered = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional int32 score = 13;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setScore = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional int32 parent_id = 14;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getParentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setParentId = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string ip = 15;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setIp = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional string location = 16;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setLocation = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional bool is_maintain = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.login.LoginResponse.prototype.getIsMaintain = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 17, false));
};


/** @param {boolean} value */
proto.login.LoginResponse.prototype.setIsMaintain = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional string maintain_info = 18;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getMaintainInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setMaintainInfo = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional string notice = 19;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getNotice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setNotice = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional string iap_verify_url = 20;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getIapVerifyUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setIapVerifyUrl = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional string share_ico = 21;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getShareIco = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setShareIco = function(value) {
  jspb.Message.setField(this, 21, value);
};


/**
 * optional string share_url = 22;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getShareUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setShareUrl = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional uint32 battle_counts = 23;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getBattleCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setBattleCounts = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * optional uint32 battle_win = 24;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getBattleWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setBattleWin = function(value) {
  jspb.Message.setField(this, 24, value);
};


/**
 * optional uint32 continue_win = 25;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getContinueWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setContinueWin = function(value) {
  jspb.Message.setField(this, 25, value);
};


/**
 * optional uint32 continue_login = 26;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getContinueLogin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setContinueLogin = function(value) {
  jspb.Message.setField(this, 26, value);
};


/**
 * optional bool user_reconnection = 27;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.login.LoginResponse.prototype.getUserReconnection = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 27, false));
};


/** @param {boolean} value */
proto.login.LoginResponse.prototype.setUserReconnection = function(value) {
  jspb.Message.setField(this, 27, value);
};


/**
 * optional uint32 user_room_id = 28;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getUserRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setUserRoomId = function(value) {
  jspb.Message.setField(this, 28, value);
};


/**
 * optional string user_server_ip = 29;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getUserServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setUserServerIp = function(value) {
  jspb.Message.setField(this, 29, value);
};


/**
 * optional int32 user_server_port = 30;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getUserServerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setUserServerPort = function(value) {
  jspb.Message.setField(this, 30, value);
};


/**
 * optional int32 game_id = 31;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 31, value);
};


/**
 * optional uint32 is_black = 32;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getIsBlack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setIsBlack = function(value) {
  jspb.Message.setField(this, 32, value);
};


/**
 * optional string update_domain = 33;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getUpdateDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setUpdateDomain = function(value) {
  jspb.Message.setField(this, 33, value);
};


/**
 * optional string login_domain = 34;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getLoginDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 34, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setLoginDomain = function(value) {
  jspb.Message.setField(this, 34, value);
};


/**
 * optional string pay_domain = 35;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getPayDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 35, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setPayDomain = function(value) {
  jspb.Message.setField(this, 35, value);
};


/**
 * optional int32 match_id = 36;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getMatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 36, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setMatchId = function(value) {
  jspb.Message.setField(this, 36, value);
};


/**
 * optional string match_server_ip = 37;
 * @return {string}
 */
proto.login.LoginResponse.prototype.getMatchServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 37, ""));
};


/** @param {string} value */
proto.login.LoginResponse.prototype.setMatchServerIp = function(value) {
  jspb.Message.setField(this, 37, value);
};


/**
 * optional int32 match_server_port = 38;
 * @return {number}
 */
proto.login.LoginResponse.prototype.getMatchServerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 38, 0));
};


/** @param {number} value */
proto.login.LoginResponse.prototype.setMatchServerPort = function(value) {
  jspb.Message.setField(this, 38, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomConfigRequest.displayName = 'proto.login.RoomConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomConfigRequest}
 */
proto.login.RoomConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomConfigRequest;
  return proto.login.RoomConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomConfigRequest}
 */
proto.login.RoomConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomConfigRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomConfigRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 app_id = 1;
 * @return {number}
 */
proto.login.RoomConfigRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomConfigRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.RoomConfigResponse.repeatedFields_, null);
};
goog.inherits(proto.login.RoomConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomConfigResponse.displayName = 'proto.login.RoomConfigResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.RoomConfigResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    configList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomConfigResponse}
 */
proto.login.RoomConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomConfigResponse;
  return proto.login.RoomConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomConfigResponse}
 */
proto.login.RoomConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomConfigResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomConfigResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getConfigList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.RoomConfigResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomConfigResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string config = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.login.RoomConfigResponse.prototype.getConfigList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.login.RoomConfigResponse.prototype.setConfigList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.login.RoomConfigResponse.prototype.addConfig = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.login.RoomConfigResponse.prototype.clearConfigList = function() {
  this.setConfigList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomCreateRequest.displayName = 'proto.login.RoomCreateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    maxRounds: jspb.Message.getFieldWithDefault(msg, 5, 0),
    roomConfig: jspb.Message.getFieldWithDefault(msg, 6, ""),
    coreVersion: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomCreateRequest}
 */
proto.login.RoomCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomCreateRequest;
  return proto.login.RoomCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomCreateRequest}
 */
proto.login.RoomCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxRounds(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomConfig(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoreVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomCreateRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomCreateRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getMaxRounds();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getRoomConfig();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getCoreVersion();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional int32 app_id = 1;
 * @return {number}
 */
proto.login.RoomCreateRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomCreateRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 game_id = 2;
 * @return {number}
 */
proto.login.RoomCreateRequest.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.RoomCreateRequest.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.login.RoomCreateRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RoomCreateRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string device_id = 4;
 * @return {string}
 */
proto.login.RoomCreateRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.RoomCreateRequest.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 max_rounds = 5;
 * @return {number}
 */
proto.login.RoomCreateRequest.prototype.getMaxRounds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.login.RoomCreateRequest.prototype.setMaxRounds = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string room_config = 6;
 * @return {string}
 */
proto.login.RoomCreateRequest.prototype.getRoomConfig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.login.RoomCreateRequest.prototype.setRoomConfig = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string core_version = 7;
 * @return {string}
 */
proto.login.RoomCreateRequest.prototype.getCoreVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.login.RoomCreateRequest.prototype.setCoreVersion = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomCreateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomCreateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomCreateResponse.displayName = 'proto.login.RoomCreateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomCreateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomCreateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomCreateResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomCreateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverIp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    serverPort: jspb.Message.getFieldWithDefault(msg, 4, ""),
    payGold: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomCreateResponse}
 */
proto.login.RoomCreateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomCreateResponse;
  return proto.login.RoomCreateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomCreateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomCreateResponse}
 */
proto.login.RoomCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerPort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPayGold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomCreateResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomCreateResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomCreateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomCreateResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getServerIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getServerPort();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getPayGold();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.RoomCreateResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomCreateResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 room_id = 2;
 * @return {number}
 */
proto.login.RoomCreateResponse.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.RoomCreateResponse.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string server_ip = 3;
 * @return {string}
 */
proto.login.RoomCreateResponse.prototype.getServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RoomCreateResponse.prototype.setServerIp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string server_port = 4;
 * @return {string}
 */
proto.login.RoomCreateResponse.prototype.getServerPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.RoomCreateResponse.prototype.setServerPort = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 pay_gold = 5;
 * @return {number}
 */
proto.login.RoomCreateResponse.prototype.getPayGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.login.RoomCreateResponse.prototype.setPayGold = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomCreateW2WRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomCreateW2WRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomCreateW2WRequest.displayName = 'proto.login.RoomCreateW2WRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomCreateW2WRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomCreateW2WRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomCreateW2WRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomCreateW2WRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    config: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gameId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomCreateW2WRequest}
 */
proto.login.RoomCreateW2WRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomCreateW2WRequest;
  return proto.login.RoomCreateW2WRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomCreateW2WRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomCreateW2WRequest}
 */
proto.login.RoomCreateW2WRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfig(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomCreateW2WRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomCreateW2WRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomCreateW2WRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomCreateW2WRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getConfig();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.RoomCreateW2WRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomCreateW2WRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.login.RoomCreateW2WRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.RoomCreateW2WRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string config = 3;
 * @return {string}
 */
proto.login.RoomCreateW2WRequest.prototype.getConfig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RoomCreateW2WRequest.prototype.setConfig = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 game_id = 4;
 * @return {number}
 */
proto.login.RoomCreateW2WRequest.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.RoomCreateW2WRequest.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomCreateW2WResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomCreateW2WResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomCreateW2WResponse.displayName = 'proto.login.RoomCreateW2WResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomCreateW2WResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomCreateW2WResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomCreateW2WResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomCreateW2WResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverIp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    serverPort: jspb.Message.getFieldWithDefault(msg, 4, 0),
    serverId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    roomUuid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomCreateW2WResponse}
 */
proto.login.RoomCreateW2WResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomCreateW2WResponse;
  return proto.login.RoomCreateW2WResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomCreateW2WResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomCreateW2WResponse}
 */
proto.login.RoomCreateW2WResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServerPort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServerId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomCreateW2WResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomCreateW2WResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomCreateW2WResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomCreateW2WResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getServerIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getServerPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getServerId();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getRoomUuid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.RoomCreateW2WResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomCreateW2WResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 room_id = 2;
 * @return {number}
 */
proto.login.RoomCreateW2WResponse.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.RoomCreateW2WResponse.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string server_ip = 3;
 * @return {string}
 */
proto.login.RoomCreateW2WResponse.prototype.getServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RoomCreateW2WResponse.prototype.setServerIp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 server_port = 4;
 * @return {number}
 */
proto.login.RoomCreateW2WResponse.prototype.getServerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.RoomCreateW2WResponse.prototype.setServerPort = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 server_id = 5;
 * @return {number}
 */
proto.login.RoomCreateW2WResponse.prototype.getServerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.login.RoomCreateW2WResponse.prototype.setServerId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string room_uuid = 6;
 * @return {string}
 */
proto.login.RoomCreateW2WResponse.prototype.getRoomUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.login.RoomCreateW2WResponse.prototype.setRoomUuid = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.UserInGameW2WRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.UserInGameW2WRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.UserInGameW2WRequest.displayName = 'proto.login.UserInGameW2WRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.UserInGameW2WRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.UserInGameW2WRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.UserInGameW2WRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.UserInGameW2WRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.UserInGameW2WRequest}
 */
proto.login.UserInGameW2WRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.UserInGameW2WRequest;
  return proto.login.UserInGameW2WRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.UserInGameW2WRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.UserInGameW2WRequest}
 */
proto.login.UserInGameW2WRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.UserInGameW2WRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserInGameW2WRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.UserInGameW2WRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserInGameW2WRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.UserInGameW2WRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.UserInGameW2WRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.login.UserInGameW2WRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.UserInGameW2WRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.UserInGameW2WResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.UserInGameW2WResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.UserInGameW2WResponse.displayName = 'proto.login.UserInGameW2WResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.UserInGameW2WResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.UserInGameW2WResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.UserInGameW2WResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.UserInGameW2WResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    serverIp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    serverPort: jspb.Message.getFieldWithDefault(msg, 4, 0),
    serverId: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.UserInGameW2WResponse}
 */
proto.login.UserInGameW2WResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.UserInGameW2WResponse;
  return proto.login.UserInGameW2WResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.UserInGameW2WResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.UserInGameW2WResponse}
 */
proto.login.UserInGameW2WResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServerPort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServerId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.UserInGameW2WResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserInGameW2WResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.UserInGameW2WResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserInGameW2WResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getServerIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getServerPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getServerId();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.UserInGameW2WResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.UserInGameW2WResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.login.UserInGameW2WResponse.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.UserInGameW2WResponse.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string server_ip = 3;
 * @return {string}
 */
proto.login.UserInGameW2WResponse.prototype.getServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.UserInGameW2WResponse.prototype.setServerIp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 server_port = 4;
 * @return {number}
 */
proto.login.UserInGameW2WResponse.prototype.getServerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.UserInGameW2WResponse.prototype.setServerPort = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 server_id = 5;
 * @return {number}
 */
proto.login.UserInGameW2WResponse.prototype.getServerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.login.UserInGameW2WResponse.prototype.setServerId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 game_id = 6;
 * @return {number}
 */
proto.login.UserInGameW2WResponse.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.login.UserInGameW2WResponse.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomEnterW2WRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomEnterW2WRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomEnterW2WRequest.displayName = 'proto.login.RoomEnterW2WRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomEnterW2WRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomEnterW2WRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomEnterW2WRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomEnterW2WRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomEnterW2WRequest}
 */
proto.login.RoomEnterW2WRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomEnterW2WRequest;
  return proto.login.RoomEnterW2WRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomEnterW2WRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomEnterW2WRequest}
 */
proto.login.RoomEnterW2WRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomEnterW2WRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomEnterW2WRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomEnterW2WRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomEnterW2WRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.RoomEnterW2WRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomEnterW2WRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 room_id = 2;
 * @return {number}
 */
proto.login.RoomEnterW2WRequest.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.RoomEnterW2WRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.login.RoomEnterW2WRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RoomEnterW2WRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomEnterW2WResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomEnterW2WResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomEnterW2WResponse.displayName = 'proto.login.RoomEnterW2WResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomEnterW2WResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomEnterW2WResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomEnterW2WResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomEnterW2WResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serverId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverIp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    serverPort: jspb.Message.getFieldWithDefault(msg, 4, 0),
    roomUuid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    gameId: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomEnterW2WResponse}
 */
proto.login.RoomEnterW2WResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomEnterW2WResponse;
  return proto.login.RoomEnterW2WResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomEnterW2WResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomEnterW2WResponse}
 */
proto.login.RoomEnterW2WResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServerPort(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomUuid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomEnterW2WResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomEnterW2WResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomEnterW2WResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomEnterW2WResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getServerId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getServerIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getServerPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getRoomUuid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.RoomEnterW2WResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomEnterW2WResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 server_id = 2;
 * @return {number}
 */
proto.login.RoomEnterW2WResponse.prototype.getServerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.RoomEnterW2WResponse.prototype.setServerId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string server_ip = 3;
 * @return {string}
 */
proto.login.RoomEnterW2WResponse.prototype.getServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RoomEnterW2WResponse.prototype.setServerIp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 server_port = 4;
 * @return {number}
 */
proto.login.RoomEnterW2WResponse.prototype.getServerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.RoomEnterW2WResponse.prototype.setServerPort = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string room_uuid = 5;
 * @return {string}
 */
proto.login.RoomEnterW2WResponse.prototype.getRoomUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.login.RoomEnterW2WResponse.prototype.setRoomUuid = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 game_id = 6;
 * @return {number}
 */
proto.login.RoomEnterW2WResponse.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.login.RoomEnterW2WResponse.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomEnterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomEnterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomEnterRequest.displayName = 'proto.login.RoomEnterRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomEnterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomEnterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomEnterRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomEnterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    coreVersion: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomEnterRequest}
 */
proto.login.RoomEnterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomEnterRequest;
  return proto.login.RoomEnterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomEnterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomEnterRequest}
 */
proto.login.RoomEnterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoreVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomEnterRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomEnterRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomEnterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomEnterRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getCoreVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.RoomEnterRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomEnterRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 room_id = 2;
 * @return {number}
 */
proto.login.RoomEnterRequest.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.RoomEnterRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.login.RoomEnterRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RoomEnterRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string device_id = 4;
 * @return {string}
 */
proto.login.RoomEnterRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.RoomEnterRequest.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string core_version = 5;
 * @return {string}
 */
proto.login.RoomEnterRequest.prototype.getCoreVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.login.RoomEnterRequest.prototype.setCoreVersion = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomEnterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomEnterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomEnterResponse.displayName = 'proto.login.RoomEnterResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomEnterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomEnterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomEnterResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomEnterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverIp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    serverPort: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gameId: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomEnterResponse}
 */
proto.login.RoomEnterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomEnterResponse;
  return proto.login.RoomEnterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomEnterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomEnterResponse}
 */
proto.login.RoomEnterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerPort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomEnterResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomEnterResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomEnterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomEnterResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getServerIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getServerPort();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.RoomEnterResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomEnterResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 room_id = 2;
 * @return {number}
 */
proto.login.RoomEnterResponse.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.RoomEnterResponse.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string server_ip = 3;
 * @return {string}
 */
proto.login.RoomEnterResponse.prototype.getServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RoomEnterResponse.prototype.setServerIp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string server_port = 4;
 * @return {string}
 */
proto.login.RoomEnterResponse.prototype.getServerPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.RoomEnterResponse.prototype.setServerPort = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 game_id = 5;
 * @return {number}
 */
proto.login.RoomEnterResponse.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.login.RoomEnterResponse.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.HallEnterW2WRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.HallEnterW2WRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.HallEnterW2WRequest.displayName = 'proto.login.HallEnterW2WRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.HallEnterW2WRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.HallEnterW2WRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.HallEnterW2WRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.HallEnterW2WRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.HallEnterW2WRequest}
 */
proto.login.HallEnterW2WRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.HallEnterW2WRequest;
  return proto.login.HallEnterW2WRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.HallEnterW2WRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.HallEnterW2WRequest}
 */
proto.login.HallEnterW2WRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.HallEnterW2WRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallEnterW2WRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.HallEnterW2WRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallEnterW2WRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.HallEnterW2WRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.HallEnterW2WRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 game_id = 2;
 * @return {number}
 */
proto.login.HallEnterW2WRequest.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.HallEnterW2WRequest.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.login.HallEnterW2WRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.HallEnterW2WRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.HallEnterW2WResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.HallEnterW2WResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.HallEnterW2WResponse.displayName = 'proto.login.HallEnterW2WResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.HallEnterW2WResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.HallEnterW2WResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.HallEnterW2WResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.HallEnterW2WResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serverId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverIp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    serverPort: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.HallEnterW2WResponse}
 */
proto.login.HallEnterW2WResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.HallEnterW2WResponse;
  return proto.login.HallEnterW2WResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.HallEnterW2WResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.HallEnterW2WResponse}
 */
proto.login.HallEnterW2WResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServerPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.HallEnterW2WResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallEnterW2WResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.HallEnterW2WResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallEnterW2WResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getServerId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getServerIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getServerPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.HallEnterW2WResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.HallEnterW2WResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 server_id = 2;
 * @return {number}
 */
proto.login.HallEnterW2WResponse.prototype.getServerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.HallEnterW2WResponse.prototype.setServerId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string server_ip = 3;
 * @return {string}
 */
proto.login.HallEnterW2WResponse.prototype.getServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.HallEnterW2WResponse.prototype.setServerIp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 server_port = 4;
 * @return {number}
 */
proto.login.HallEnterW2WResponse.prototype.getServerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.HallEnterW2WResponse.prototype.setServerPort = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.HallEnterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.HallEnterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.HallEnterRequest.displayName = 'proto.login.HallEnterRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.HallEnterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.HallEnterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.HallEnterRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.HallEnterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tableLevel: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    coreVersion: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.HallEnterRequest}
 */
proto.login.HallEnterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.HallEnterRequest;
  return proto.login.HallEnterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.HallEnterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.HallEnterRequest}
 */
proto.login.HallEnterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTableLevel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoreVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.HallEnterRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallEnterRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.HallEnterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallEnterRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getTableLevel();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getCoreVersion();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.HallEnterRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.HallEnterRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 game_id = 2;
 * @return {number}
 */
proto.login.HallEnterRequest.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.HallEnterRequest.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 table_level = 3;
 * @return {number}
 */
proto.login.HallEnterRequest.prototype.getTableLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.HallEnterRequest.prototype.setTableLevel = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string user_id = 4;
 * @return {string}
 */
proto.login.HallEnterRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.HallEnterRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string device_id = 5;
 * @return {string}
 */
proto.login.HallEnterRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.login.HallEnterRequest.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string core_version = 6;
 * @return {string}
 */
proto.login.HallEnterRequest.prototype.getCoreVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.login.HallEnterRequest.prototype.setCoreVersion = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.HallEnterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.HallEnterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.HallEnterResponse.displayName = 'proto.login.HallEnterResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.HallEnterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.HallEnterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.HallEnterResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.HallEnterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tableLevel: jspb.Message.getFieldWithDefault(msg, 3, 0),
    serverIp: jspb.Message.getFieldWithDefault(msg, 4, ""),
    serverPort: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.HallEnterResponse}
 */
proto.login.HallEnterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.HallEnterResponse;
  return proto.login.HallEnterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.HallEnterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.HallEnterResponse}
 */
proto.login.HallEnterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTableLevel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.HallEnterResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallEnterResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.HallEnterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallEnterResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getTableLevel();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getServerIp();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getServerPort();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.HallEnterResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.HallEnterResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 game_id = 2;
 * @return {number}
 */
proto.login.HallEnterResponse.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.HallEnterResponse.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 table_level = 3;
 * @return {number}
 */
proto.login.HallEnterResponse.prototype.getTableLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.HallEnterResponse.prototype.setTableLevel = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string server_ip = 4;
 * @return {string}
 */
proto.login.HallEnterResponse.prototype.getServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.HallEnterResponse.prototype.setServerIp = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string server_port = 5;
 * @return {string}
 */
proto.login.HallEnterResponse.prototype.getServerPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.login.HallEnterResponse.prototype.setServerPort = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.HallViewRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.HallViewRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.HallViewRequest.displayName = 'proto.login.HallViewRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.HallViewRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.HallViewRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.HallViewRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.HallViewRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.HallViewRequest}
 */
proto.login.HallViewRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.HallViewRequest;
  return proto.login.HallViewRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.HallViewRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.HallViewRequest}
 */
proto.login.HallViewRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.HallViewRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallViewRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.HallViewRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallViewRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.HallViewRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.HallViewRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 game_id = 2;
 * @return {number}
 */
proto.login.HallViewRequest.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.HallViewRequest.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.HallViewResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.HallViewResponse.repeatedFields_, null);
};
goog.inherits(proto.login.HallViewResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.HallViewResponse.displayName = 'proto.login.HallViewResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.HallViewResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.HallViewResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.HallViewResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.HallViewResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.HallViewResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    infoList: jspb.Message.toObjectList(msg.getInfoList(),
    proto.login.HallViewResponse.TableLevelInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.HallViewResponse}
 */
proto.login.HallViewResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.HallViewResponse;
  return proto.login.HallViewResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.HallViewResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.HallViewResponse}
 */
proto.login.HallViewResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameId(value);
      break;
    case 3:
      var value = new proto.login.HallViewResponse.TableLevelInfo;
      reader.readMessage(value,proto.login.HallViewResponse.TableLevelInfo.deserializeBinaryFromReader);
      msg.addInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.HallViewResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallViewResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.HallViewResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallViewResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.login.HallViewResponse.TableLevelInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.HallViewResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.HallViewResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 game_id = 2;
 * @return {number}
 */
proto.login.HallViewResponse.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.HallViewResponse.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated TableLevelInfo info = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.login.HallViewResponse.TableLevelInfo>}
 */
proto.login.HallViewResponse.prototype.getInfoList = function() {
  return /** @type{!Array.<!proto.login.HallViewResponse.TableLevelInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.login.HallViewResponse.TableLevelInfo, 3));
};


/** @param {!Array.<!proto.login.HallViewResponse.TableLevelInfo>} value */
proto.login.HallViewResponse.prototype.setInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.login.HallViewResponse.TableLevelInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.login.HallViewResponse.TableLevelInfo}
 */
proto.login.HallViewResponse.prototype.addInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.login.HallViewResponse.TableLevelInfo, opt_index);
};


proto.login.HallViewResponse.prototype.clearInfoList = function() {
  this.setInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.HallViewResponse.TableLevelInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.HallViewResponse.TableLevelInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.HallViewResponse.TableLevelInfo.displayName = 'proto.login.HallViewResponse.TableLevelInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.HallViewResponse.TableLevelInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.login.HallViewResponse.TableLevelInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.HallViewResponse.TableLevelInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.HallViewResponse.TableLevelInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableLevel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.HallViewResponse.TableLevelInfo}
 */
proto.login.HallViewResponse.TableLevelInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.HallViewResponse.TableLevelInfo;
  return proto.login.HallViewResponse.TableLevelInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.HallViewResponse.TableLevelInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.HallViewResponse.TableLevelInfo}
 */
proto.login.HallViewResponse.TableLevelInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTableLevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.HallViewResponse.TableLevelInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallViewResponse.TableLevelInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.HallViewResponse.TableLevelInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HallViewResponse.TableLevelInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTableLevel();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 table_level = 1;
 * @return {number}
 */
proto.login.HallViewResponse.TableLevelInfo.prototype.getTableLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.HallViewResponse.TableLevelInfo.prototype.setTableLevel = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.login.HallViewResponse.TableLevelInfo.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.HallViewResponse.TableLevelInfo.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomListUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomListUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomListUser.displayName = 'proto.login.RoomListUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomListUser.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomListUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomListUser} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomListUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    userName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    avatarUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    point: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    aid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomListUser}
 */
proto.login.RoomListUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomListUser;
  return proto.login.RoomListUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomListUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomListUser}
 */
proto.login.RoomListUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoint(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomListUser} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomListUser.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomListUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomListUser.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getAvatarUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPoint();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getAid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string user_name = 1;
 * @return {string}
 */
proto.login.RoomListUser.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.login.RoomListUser.prototype.setUserName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string avatar_url = 2;
 * @return {string}
 */
proto.login.RoomListUser.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.RoomListUser.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string point = 3;
 * @return {string}
 */
proto.login.RoomListUser.prototype.getPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RoomListUser.prototype.setPoint = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string user_id = 4;
 * @return {string}
 */
proto.login.RoomListUser.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.RoomListUser.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 aid = 5;
 * @return {number}
 */
proto.login.RoomListUser.prototype.getAid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.login.RoomListUser.prototype.setAid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomListW2WRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomListW2WRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomListW2WRequest.displayName = 'proto.login.RoomListW2WRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomListW2WRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomListW2WRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomListW2WRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomListW2WRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomListW2WRequest}
 */
proto.login.RoomListW2WRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomListW2WRequest;
  return proto.login.RoomListW2WRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomListW2WRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomListW2WRequest}
 */
proto.login.RoomListW2WRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomListW2WRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomListW2WRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomListW2WRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomListW2WRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.RoomListW2WRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomListW2WRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.login.RoomListW2WRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.RoomListW2WRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomListW2WResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomListW2WResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomListW2WResponse.displayName = 'proto.login.RoomListW2WResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomListW2WResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomListW2WResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomListW2WResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomListW2WResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomList: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomListW2WResponse}
 */
proto.login.RoomListW2WResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomListW2WResponse;
  return proto.login.RoomListW2WResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomListW2WResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomListW2WResponse}
 */
proto.login.RoomListW2WResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomListW2WResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomListW2WResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomListW2WResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomListW2WResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomList();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.RoomListW2WResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomListW2WResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string room_list = 2;
 * @return {string}
 */
proto.login.RoomListW2WResponse.prototype.getRoomList = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.RoomListW2WResponse.prototype.setRoomList = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomListRequest.displayName = 'proto.login.RoomListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomListRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomListRequest}
 */
proto.login.RoomListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomListRequest;
  return proto.login.RoomListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomListRequest}
 */
proto.login.RoomListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomListRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomListRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomListRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.RoomListRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomListRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.login.RoomListRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.RoomListRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string device_id = 3;
 * @return {string}
 */
proto.login.RoomListRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RoomListRequest.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomItemData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.RoomItemData.repeatedFields_, null);
};
goog.inherits(proto.login.RoomItemData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomItemData.displayName = 'proto.login.RoomItemData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.RoomItemData.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomItemData.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomItemData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomItemData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomItemData.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    config: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userList: jspb.Message.toObjectList(msg.getUserList(),
    proto.login.RoomListUser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomItemData}
 */
proto.login.RoomItemData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomItemData;
  return proto.login.RoomItemData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomItemData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomItemData}
 */
proto.login.RoomItemData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfig(value);
      break;
    case 4:
      var value = new proto.login.RoomListUser;
      reader.readMessage(value,proto.login.RoomListUser.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomItemData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomItemData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomItemData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomItemData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRoomId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getConfig();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.login.RoomListUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional string room_id = 2;
 * @return {string}
 */
proto.login.RoomItemData.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.RoomItemData.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string config = 3;
 * @return {string}
 */
proto.login.RoomItemData.prototype.getConfig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RoomItemData.prototype.setConfig = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated RoomListUser user = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.login.RoomListUser>}
 */
proto.login.RoomItemData.prototype.getUserList = function() {
  return /** @type{!Array.<!proto.login.RoomListUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.login.RoomListUser, 4));
};


/** @param {!Array.<!proto.login.RoomListUser>} value */
proto.login.RoomItemData.prototype.setUserList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.login.RoomListUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.login.RoomListUser}
 */
proto.login.RoomItemData.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.login.RoomListUser, opt_index);
};


proto.login.RoomItemData.prototype.clearUserList = function() {
  this.setUserList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RecordItemData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.RecordItemData.repeatedFields_, null);
};
goog.inherits(proto.login.RecordItemData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RecordItemData.displayName = 'proto.login.RecordItemData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.RecordItemData.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RecordItemData.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RecordItemData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RecordItemData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RecordItemData.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    recordId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dateTime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userList: jspb.Message.toObjectList(msg.getUserList(),
    proto.login.RoomListUser.toObject, includeInstance),
    disbandUid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RecordItemData}
 */
proto.login.RecordItemData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RecordItemData;
  return proto.login.RecordItemData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RecordItemData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RecordItemData}
 */
proto.login.RecordItemData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecordId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateTime(value);
      break;
    case 5:
      var value = new proto.login.RoomListUser;
      reader.readMessage(value,proto.login.RoomListUser.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisbandUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RecordItemData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RecordItemData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RecordItemData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RecordItemData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRoomId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getRecordId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getDateTime();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.login.RoomListUser.serializeBinaryToWriter
    );
  }
  f = this.getDisbandUid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int32 room_id = 1;
 * @return {number}
 */
proto.login.RecordItemData.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RecordItemData.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 game_id = 2;
 * @return {number}
 */
proto.login.RecordItemData.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.RecordItemData.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string record_id = 3;
 * @return {string}
 */
proto.login.RecordItemData.prototype.getRecordId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RecordItemData.prototype.setRecordId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string date_time = 4;
 * @return {string}
 */
proto.login.RecordItemData.prototype.getDateTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.RecordItemData.prototype.setDateTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated RoomListUser user = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.login.RoomListUser>}
 */
proto.login.RecordItemData.prototype.getUserList = function() {
  return /** @type{!Array.<!proto.login.RoomListUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.login.RoomListUser, 5));
};


/** @param {!Array.<!proto.login.RoomListUser>} value */
proto.login.RecordItemData.prototype.setUserList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.login.RoomListUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.login.RoomListUser}
 */
proto.login.RecordItemData.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.login.RoomListUser, opt_index);
};


proto.login.RecordItemData.prototype.clearUserList = function() {
  this.setUserList([]);
};


/**
 * optional string disband_uid = 6;
 * @return {string}
 */
proto.login.RecordItemData.prototype.getDisbandUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.login.RecordItemData.prototype.setDisbandUid = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.RoomListResponse.repeatedFields_, null);
};
goog.inherits(proto.login.RoomListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomListResponse.displayName = 'proto.login.RoomListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.RoomListResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomListResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomItemList: jspb.Message.toObjectList(msg.getRoomItemList(),
    proto.login.RoomItemData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomListResponse}
 */
proto.login.RoomListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomListResponse;
  return proto.login.RoomListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomListResponse}
 */
proto.login.RoomListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.login.RoomItemData;
      reader.readMessage(value,proto.login.RoomItemData.deserializeBinaryFromReader);
      msg.addRoomItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomListResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomListResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomListResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.login.RoomItemData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.RoomListResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomListResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated RoomItemData room_item = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.login.RoomItemData>}
 */
proto.login.RoomListResponse.prototype.getRoomItemList = function() {
  return /** @type{!Array.<!proto.login.RoomItemData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.login.RoomItemData, 2));
};


/** @param {!Array.<!proto.login.RoomItemData>} value */
proto.login.RoomListResponse.prototype.setRoomItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.login.RoomItemData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.login.RoomItemData}
 */
proto.login.RoomListResponse.prototype.addRoomItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.login.RoomItemData, opt_index);
};


proto.login.RoomListResponse.prototype.clearRoomItemList = function() {
  this.setRoomItemList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RecordListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RecordListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RecordListRequest.displayName = 'proto.login.RecordListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RecordListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RecordListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RecordListRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RecordListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RecordListRequest}
 */
proto.login.RecordListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RecordListRequest;
  return proto.login.RecordListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RecordListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RecordListRequest}
 */
proto.login.RecordListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RecordListRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RecordListRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RecordListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RecordListRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.RecordListRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RecordListRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.login.RecordListRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.RecordListRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string device_id = 3;
 * @return {string}
 */
proto.login.RecordListRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RecordListRequest.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RecordListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.RecordListResponse.repeatedFields_, null);
};
goog.inherits(proto.login.RecordListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RecordListResponse.displayName = 'proto.login.RecordListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.RecordListResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RecordListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RecordListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RecordListResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RecordListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    recordItemList: jspb.Message.toObjectList(msg.getRecordItemList(),
    proto.login.RecordItemData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RecordListResponse}
 */
proto.login.RecordListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RecordListResponse;
  return proto.login.RecordListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RecordListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RecordListResponse}
 */
proto.login.RecordListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.login.RecordItemData;
      reader.readMessage(value,proto.login.RecordItemData.deserializeBinaryFromReader);
      msg.addRecordItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RecordListResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RecordListResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RecordListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RecordListResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRecordItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.login.RecordItemData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.RecordListResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RecordListResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated RecordItemData record_item = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.login.RecordItemData>}
 */
proto.login.RecordListResponse.prototype.getRecordItemList = function() {
  return /** @type{!Array.<!proto.login.RecordItemData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.login.RecordItemData, 2));
};


/** @param {!Array.<!proto.login.RecordItemData>} value */
proto.login.RecordListResponse.prototype.setRecordItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.login.RecordItemData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.login.RecordItemData}
 */
proto.login.RecordListResponse.prototype.addRecordItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.login.RecordItemData, opt_index);
};


proto.login.RecordListResponse.prototype.clearRecordItemList = function() {
  this.setRecordItemList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.UserRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.UserRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.UserRecord.displayName = 'proto.login.UserRecord';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.UserRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.login.UserRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.UserRecord} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.UserRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    avatarUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    point: jspb.Message.getFieldWithDefault(msg, 4, ""),
    flag: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.UserRecord}
 */
proto.login.UserRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.UserRecord;
  return proto.login.UserRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.UserRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.UserRecord}
 */
proto.login.UserRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPoint(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.UserRecord} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserRecord.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.UserRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserRecord.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAvatarUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPoint();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getFlag();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.login.UserRecord.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.login.UserRecord.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.login.UserRecord.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.UserRecord.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string avatar_url = 3;
 * @return {string}
 */
proto.login.UserRecord.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.UserRecord.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string point = 4;
 * @return {string}
 */
proto.login.UserRecord.prototype.getPoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.UserRecord.prototype.setPoint = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string flag = 5;
 * @return {string}
 */
proto.login.UserRecord.prototype.getFlag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.login.UserRecord.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RecordInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.RecordInfo.repeatedFields_, null);
};
goog.inherits(proto.login.RecordInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RecordInfo.displayName = 'proto.login.RecordInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.RecordInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RecordInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RecordInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RecordInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RecordInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    win: jspb.Message.getFieldWithDefault(msg, 1, false),
    theRound: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userInfoList: jspb.Message.toObjectList(msg.getUserInfoList(),
    proto.login.UserRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RecordInfo}
 */
proto.login.RecordInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RecordInfo;
  return proto.login.RecordInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RecordInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RecordInfo}
 */
proto.login.RecordInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTheRound(value);
      break;
    case 3:
      var value = new proto.login.UserRecord;
      reader.readMessage(value,proto.login.UserRecord.deserializeBinaryFromReader);
      msg.addUserInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RecordInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RecordInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RecordInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RecordInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWin();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getTheRound();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getUserInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.login.UserRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool win = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.login.RecordInfo.prototype.getWin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.login.RecordInfo.prototype.setWin = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 the_round = 2;
 * @return {number}
 */
proto.login.RecordInfo.prototype.getTheRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.RecordInfo.prototype.setTheRound = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated UserRecord user_info = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.login.UserRecord>}
 */
proto.login.RecordInfo.prototype.getUserInfoList = function() {
  return /** @type{!Array.<!proto.login.UserRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.login.UserRecord, 3));
};


/** @param {!Array.<!proto.login.UserRecord>} value */
proto.login.RecordInfo.prototype.setUserInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.login.UserRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.login.UserRecord}
 */
proto.login.RecordInfo.prototype.addUserInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.login.UserRecord, opt_index);
};


proto.login.RecordInfo.prototype.clearUserInfoList = function() {
  this.setUserInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RecordInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RecordInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RecordInfoRequest.displayName = 'proto.login.RecordInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RecordInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RecordInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RecordInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RecordInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    roomUniqueId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RecordInfoRequest}
 */
proto.login.RecordInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RecordInfoRequest;
  return proto.login.RecordInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RecordInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RecordInfoRequest}
 */
proto.login.RecordInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomUniqueId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RecordInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RecordInfoRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RecordInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RecordInfoRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getRoomUniqueId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.RecordInfoRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RecordInfoRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.login.RecordInfoRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.RecordInfoRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string device_id = 3;
 * @return {string}
 */
proto.login.RecordInfoRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.RecordInfoRequest.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string room_unique_id = 4;
 * @return {string}
 */
proto.login.RecordInfoRequest.prototype.getRoomUniqueId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.RecordInfoRequest.prototype.setRoomUniqueId = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RecordInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.RecordInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.login.RecordInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RecordInfoResponse.displayName = 'proto.login.RecordInfoResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.RecordInfoResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RecordInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RecordInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RecordInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RecordInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    datetime: jspb.Message.getFieldWithDefault(msg, 2, ""),
    recordInfoDataList: jspb.Message.toObjectList(msg.getRecordInfoDataList(),
    proto.login.RecordInfo.toObject, includeInstance),
    roomUniqueId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RecordInfoResponse}
 */
proto.login.RecordInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RecordInfoResponse;
  return proto.login.RecordInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RecordInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RecordInfoResponse}
 */
proto.login.RecordInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatetime(value);
      break;
    case 3:
      var value = new proto.login.RecordInfo;
      reader.readMessage(value,proto.login.RecordInfo.deserializeBinaryFromReader);
      msg.addRecordInfoData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomUniqueId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RecordInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RecordInfoResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RecordInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RecordInfoResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getDatetime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRecordInfoDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.login.RecordInfo.serializeBinaryToWriter
    );
  }
  f = this.getRoomUniqueId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.RecordInfoResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RecordInfoResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string datetime = 2;
 * @return {string}
 */
proto.login.RecordInfoResponse.prototype.getDatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.RecordInfoResponse.prototype.setDatetime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated RecordInfo record_info_data = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.login.RecordInfo>}
 */
proto.login.RecordInfoResponse.prototype.getRecordInfoDataList = function() {
  return /** @type{!Array.<!proto.login.RecordInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.login.RecordInfo, 3));
};


/** @param {!Array.<!proto.login.RecordInfo>} value */
proto.login.RecordInfoResponse.prototype.setRecordInfoDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.login.RecordInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.login.RecordInfo}
 */
proto.login.RecordInfoResponse.prototype.addRecordInfoData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.login.RecordInfo, opt_index);
};


proto.login.RecordInfoResponse.prototype.clearRecordInfoDataList = function() {
  this.setRecordInfoDataList([]);
};


/**
 * optional string room_unique_id = 4;
 * @return {string}
 */
proto.login.RecordInfoResponse.prototype.getRoomUniqueId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.RecordInfoResponse.prototype.setRoomUniqueId = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CreateRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CreateRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CreateRoomRequest.displayName = 'proto.login.CreateRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CreateRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CreateRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CreateRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CreateRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    owner: jspb.Message.getFieldWithDefault(msg, 2, ""),
    kwargs: jspb.Message.getFieldWithDefault(msg, 3, ""),
    roomUuid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CreateRoomRequest}
 */
proto.login.CreateRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CreateRoomRequest;
  return proto.login.CreateRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CreateRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CreateRoomRequest}
 */
proto.login.CreateRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKwargs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CreateRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CreateRoomRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CreateRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CreateRoomRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRoomid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getOwner();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getKwargs();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getRoomUuid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 roomId = 1;
 * @return {number}
 */
proto.login.CreateRoomRequest.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CreateRoomRequest.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string owner = 2;
 * @return {string}
 */
proto.login.CreateRoomRequest.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.CreateRoomRequest.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string kwargs = 3;
 * @return {string}
 */
proto.login.CreateRoomRequest.prototype.getKwargs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.CreateRoomRequest.prototype.setKwargs = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string room_uuid = 4;
 * @return {string}
 */
proto.login.CreateRoomRequest.prototype.getRoomUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.CreateRoomRequest.prototype.setRoomUuid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.HeartbeatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.HeartbeatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.HeartbeatRequest.displayName = 'proto.login.HeartbeatRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.HeartbeatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.HeartbeatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.HeartbeatRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.HeartbeatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.HeartbeatRequest}
 */
proto.login.HeartbeatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.HeartbeatRequest;
  return proto.login.HeartbeatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.HeartbeatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.HeartbeatRequest}
 */
proto.login.HeartbeatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.HeartbeatRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HeartbeatRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.HeartbeatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HeartbeatRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.login.HeartbeatRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.login.HeartbeatRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.login.HeartbeatRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.HeartbeatRequest.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 app_id = 3;
 * @return {number}
 */
proto.login.HeartbeatRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.HeartbeatRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.HeartbeatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.HeartbeatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.HeartbeatResponse.displayName = 'proto.login.HeartbeatResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.HeartbeatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.HeartbeatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.HeartbeatResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.HeartbeatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.HeartbeatResponse}
 */
proto.login.HeartbeatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.HeartbeatResponse;
  return proto.login.HeartbeatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.HeartbeatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.HeartbeatResponse}
 */
proto.login.HeartbeatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.HeartbeatResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HeartbeatResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.HeartbeatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.HeartbeatResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.login.HeartbeatResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.login.HeartbeatResponse.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.UserBalanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.UserBalanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.UserBalanceRequest.displayName = 'proto.login.UserBalanceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.UserBalanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.UserBalanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.UserBalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.UserBalanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    appId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.UserBalanceRequest}
 */
proto.login.UserBalanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.UserBalanceRequest;
  return proto.login.UserBalanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.UserBalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.UserBalanceRequest}
 */
proto.login.UserBalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.UserBalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserBalanceRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.UserBalanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserBalanceRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getRoomId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.login.UserBalanceRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.login.UserBalanceRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.login.UserBalanceRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.UserBalanceRequest.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 app_id = 3;
 * @return {number}
 */
proto.login.UserBalanceRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.UserBalanceRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 room_id = 4;
 * @return {number}
 */
proto.login.UserBalanceRequest.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.UserBalanceRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.UserBalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.UserBalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.UserBalanceResponse.displayName = 'proto.login.UserBalanceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.UserBalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.UserBalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.UserBalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.UserBalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gold: jspb.Message.getFieldWithDefault(msg, 3, 0),
    diamond: jspb.Message.getFieldWithDefault(msg, 4, 0),
    level: jspb.Message.getFieldWithDefault(msg, 5, 0),
    exp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    battleCounts: jspb.Message.getFieldWithDefault(msg, 7, 0),
    battleWin: jspb.Message.getFieldWithDefault(msg, 8, 0),
    continueWin: jspb.Message.getFieldWithDefault(msg, 9, 0),
    matchBattleCounts: jspb.Message.getFieldWithDefault(msg, 10, 0),
    matchBattleWin: jspb.Message.getFieldWithDefault(msg, 11, 0),
    matchContinueWin: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.UserBalanceResponse}
 */
proto.login.UserBalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.UserBalanceResponse;
  return proto.login.UserBalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.UserBalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.UserBalanceResponse}
 */
proto.login.UserBalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGold(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiamond(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLevel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattleCounts(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattleWin(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContinueWin(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMatchBattleCounts(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMatchBattleWin(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMatchContinueWin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.UserBalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserBalanceResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.UserBalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.UserBalanceResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getGold();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getDiamond();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getLevel();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getExp();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getBattleCounts();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getBattleWin();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = this.getContinueWin();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = this.getMatchBattleCounts();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = this.getMatchBattleWin();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = this.getMatchContinueWin();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.UserBalanceResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.UserBalanceResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.login.UserBalanceResponse.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.UserBalanceResponse.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 gold = 3;
 * @return {number}
 */
proto.login.UserBalanceResponse.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.UserBalanceResponse.prototype.setGold = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 diamond = 4;
 * @return {number}
 */
proto.login.UserBalanceResponse.prototype.getDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.UserBalanceResponse.prototype.setDiamond = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 level = 5;
 * @return {number}
 */
proto.login.UserBalanceResponse.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.login.UserBalanceResponse.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 exp = 6;
 * @return {number}
 */
proto.login.UserBalanceResponse.prototype.getExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.login.UserBalanceResponse.prototype.setExp = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 battle_counts = 7;
 * @return {number}
 */
proto.login.UserBalanceResponse.prototype.getBattleCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.login.UserBalanceResponse.prototype.setBattleCounts = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 battle_win = 8;
 * @return {number}
 */
proto.login.UserBalanceResponse.prototype.getBattleWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.login.UserBalanceResponse.prototype.setBattleWin = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 continue_win = 9;
 * @return {number}
 */
proto.login.UserBalanceResponse.prototype.getContinueWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.login.UserBalanceResponse.prototype.setContinueWin = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint32 match_battle_counts = 10;
 * @return {number}
 */
proto.login.UserBalanceResponse.prototype.getMatchBattleCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.login.UserBalanceResponse.prototype.setMatchBattleCounts = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional uint32 match_battle_win = 11;
 * @return {number}
 */
proto.login.UserBalanceResponse.prototype.getMatchBattleWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.login.UserBalanceResponse.prototype.setMatchBattleWin = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional uint32 match_continue_win = 12;
 * @return {number}
 */
proto.login.UserBalanceResponse.prototype.getMatchContinueWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.login.UserBalanceResponse.prototype.setMatchContinueWin = function(value) {
  jspb.Message.setField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RefundWebResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RefundWebResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RefundWebResponse.displayName = 'proto.login.RefundWebResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RefundWebResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RefundWebResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RefundWebResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RefundWebResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gameType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    appId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    owner: jspb.Message.getFieldWithDefault(msg, 5, ""),
    roomUuid: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RefundWebResponse}
 */
proto.login.RefundWebResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RefundWebResponse;
  return proto.login.RefundWebResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RefundWebResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RefundWebResponse}
 */
proto.login.RefundWebResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RefundWebResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RefundWebResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RefundWebResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RefundWebResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getGameType();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getOwner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getRoomUuid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.RefundWebResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RefundWebResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 room_id = 2;
 * @return {number}
 */
proto.login.RefundWebResponse.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.RefundWebResponse.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 game_type = 3;
 * @return {number}
 */
proto.login.RefundWebResponse.prototype.getGameType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.RefundWebResponse.prototype.setGameType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 app_id = 4;
 * @return {number}
 */
proto.login.RefundWebResponse.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.RefundWebResponse.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string owner = 5;
 * @return {string}
 */
proto.login.RefundWebResponse.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.login.RefundWebResponse.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string room_uuid = 6;
 * @return {string}
 */
proto.login.RefundWebResponse.prototype.getRoomUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.login.RefundWebResponse.prototype.setRoomUuid = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.ReplayRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.ReplayRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.ReplayRequest.displayName = 'proto.login.ReplayRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.ReplayRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.ReplayRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.ReplayRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.ReplayRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomUuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    theRound: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.ReplayRequest}
 */
proto.login.ReplayRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.ReplayRequest;
  return proto.login.ReplayRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.ReplayRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.ReplayRequest}
 */
proto.login.ReplayRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomUuid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTheRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.ReplayRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.ReplayRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.ReplayRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.ReplayRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTheRound();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.ReplayRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.ReplayRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string room_uuid = 2;
 * @return {string}
 */
proto.login.ReplayRequest.prototype.getRoomUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.ReplayRequest.prototype.setRoomUuid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 the_round = 3;
 * @return {number}
 */
proto.login.ReplayRequest.prototype.getTheRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.ReplayRequest.prototype.setTheRound = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.ReplayResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.ReplayResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.ReplayResponse.displayName = 'proto.login.ReplayResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.ReplayResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.ReplayResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.ReplayResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.ReplayResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    replay: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.ReplayResponse}
 */
proto.login.ReplayResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.ReplayResponse;
  return proto.login.ReplayResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.ReplayResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.ReplayResponse}
 */
proto.login.ReplayResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.ReplayResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.ReplayResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.ReplayResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.ReplayResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getReplay();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.ReplayResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.ReplayResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string replay = 2;
 * @return {string}
 */
proto.login.ReplayResponse.prototype.getReplay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.ReplayResponse.prototype.setReplay = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.RoomReplayRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.RoomReplayRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.RoomReplayRequest.displayName = 'proto.login.RoomReplayRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.RoomReplayRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.RoomReplayRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.RoomReplayRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.RoomReplayRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.RoomReplayRequest}
 */
proto.login.RoomReplayRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.RoomReplayRequest;
  return proto.login.RoomReplayRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.RoomReplayRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.RoomReplayRequest}
 */
proto.login.RoomReplayRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.RoomReplayRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomReplayRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.RoomReplayRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.RoomReplayRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.RoomReplayRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.RoomReplayRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 room_id = 2;
 * @return {number}
 */
proto.login.RoomReplayRequest.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.RoomReplayRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.InvitationInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.InvitationInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.InvitationInfoRequest.displayName = 'proto.login.InvitationInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.InvitationInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.InvitationInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.InvitationInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.InvitationInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.InvitationInfoRequest}
 */
proto.login.InvitationInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.InvitationInfoRequest;
  return proto.login.InvitationInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.InvitationInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.InvitationInfoRequest}
 */
proto.login.InvitationInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.InvitationInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.InvitationInfoRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.InvitationInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.InvitationInfoRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.InvitationInfoRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.InvitationInfoRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.login.InvitationInfoRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.InvitationInfoRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.InvitationInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.InvitationInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.InvitationInfoResponse.displayName = 'proto.login.InvitationInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.InvitationInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.InvitationInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.InvitationInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.InvitationInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userNick: jspb.Message.getFieldWithDefault(msg, 2, ""),
    avatarUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    proxyerId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.InvitationInfoResponse}
 */
proto.login.InvitationInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.InvitationInfoResponse;
  return proto.login.InvitationInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.InvitationInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.InvitationInfoResponse}
 */
proto.login.InvitationInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserNick(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProxyerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.InvitationInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.InvitationInfoResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.InvitationInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.InvitationInfoResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUserNick();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAvatarUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getProxyerId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.InvitationInfoResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.InvitationInfoResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user_nick = 2;
 * @return {string}
 */
proto.login.InvitationInfoResponse.prototype.getUserNick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.InvitationInfoResponse.prototype.setUserNick = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string avatar_url = 3;
 * @return {string}
 */
proto.login.InvitationInfoResponse.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.InvitationInfoResponse.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 proxyer_id = 4;
 * @return {number}
 */
proto.login.InvitationInfoResponse.prototype.getProxyerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.InvitationInfoResponse.prototype.setProxyerId = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.SendSmsCodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.SendSmsCodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.SendSmsCodeRequest.displayName = 'proto.login.SendSmsCodeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.SendSmsCodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.SendSmsCodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.SendSmsCodeRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.SendSmsCodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.SendSmsCodeRequest}
 */
proto.login.SendSmsCodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.SendSmsCodeRequest;
  return proto.login.SendSmsCodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.SendSmsCodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.SendSmsCodeRequest}
 */
proto.login.SendSmsCodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.SendSmsCodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.SendSmsCodeRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.SendSmsCodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.SendSmsCodeRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.SendSmsCodeRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.SendSmsCodeRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.login.SendSmsCodeRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.SendSmsCodeRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string phone_number = 3;
 * @return {string}
 */
proto.login.SendSmsCodeRequest.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.SendSmsCodeRequest.prototype.setPhoneNumber = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.SendSmsCodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.SendSmsCodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.SendSmsCodeResponse.displayName = 'proto.login.SendSmsCodeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.SendSmsCodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.SendSmsCodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.SendSmsCodeResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.SendSmsCodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.SendSmsCodeResponse}
 */
proto.login.SendSmsCodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.SendSmsCodeResponse;
  return proto.login.SendSmsCodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.SendSmsCodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.SendSmsCodeResponse}
 */
proto.login.SendSmsCodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.SendSmsCodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.SendSmsCodeResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.SendSmsCodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.SendSmsCodeResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.SendSmsCodeResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.SendSmsCodeResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.SmsVerificationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.SmsVerificationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.SmsVerificationRequest.displayName = 'proto.login.SmsVerificationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.SmsVerificationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.SmsVerificationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.SmsVerificationRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.SmsVerificationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    smsCode: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.SmsVerificationRequest}
 */
proto.login.SmsVerificationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.SmsVerificationRequest;
  return proto.login.SmsVerificationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.SmsVerificationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.SmsVerificationRequest}
 */
proto.login.SmsVerificationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSmsCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.SmsVerificationRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.SmsVerificationRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.SmsVerificationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.SmsVerificationRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getSmsCode();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.SmsVerificationRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.SmsVerificationRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.login.SmsVerificationRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.SmsVerificationRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string phone_number = 3;
 * @return {string}
 */
proto.login.SmsVerificationRequest.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.SmsVerificationRequest.prototype.setPhoneNumber = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 sms_code = 4;
 * @return {number}
 */
proto.login.SmsVerificationRequest.prototype.getSmsCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.SmsVerificationRequest.prototype.setSmsCode = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.SmsVerificationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.SmsVerificationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.SmsVerificationResponse.displayName = 'proto.login.SmsVerificationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.SmsVerificationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.SmsVerificationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.SmsVerificationResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.SmsVerificationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    newProxyerId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.SmsVerificationResponse}
 */
proto.login.SmsVerificationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.SmsVerificationResponse;
  return proto.login.SmsVerificationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.SmsVerificationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.SmsVerificationResponse}
 */
proto.login.SmsVerificationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNewProxyerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.SmsVerificationResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.SmsVerificationResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.SmsVerificationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.SmsVerificationResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getNewProxyerId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.SmsVerificationResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.SmsVerificationResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 new_proxyer_id = 2;
 * @return {number}
 */
proto.login.SmsVerificationResponse.prototype.getNewProxyerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.SmsVerificationResponse.prototype.setNewProxyerId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.ExistRoomW2WRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.ExistRoomW2WRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.ExistRoomW2WRequest.displayName = 'proto.login.ExistRoomW2WRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.ExistRoomW2WRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.ExistRoomW2WRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.ExistRoomW2WRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.ExistRoomW2WRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    appId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.ExistRoomW2WRequest}
 */
proto.login.ExistRoomW2WRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.ExistRoomW2WRequest;
  return proto.login.ExistRoomW2WRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.ExistRoomW2WRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.ExistRoomW2WRequest}
 */
proto.login.ExistRoomW2WRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.ExistRoomW2WRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.ExistRoomW2WRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.ExistRoomW2WRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.ExistRoomW2WRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getServerId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 server_id = 1;
 * @return {number}
 */
proto.login.ExistRoomW2WRequest.prototype.getServerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.ExistRoomW2WRequest.prototype.setServerId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 room_id = 2;
 * @return {number}
 */
proto.login.ExistRoomW2WRequest.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.ExistRoomW2WRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 app_id = 3;
 * @return {number}
 */
proto.login.ExistRoomW2WRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.ExistRoomW2WRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.GetUserInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.GetUserInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.GetUserInfoRequest.displayName = 'proto.login.GetUserInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.GetUserInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.GetUserInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.GetUserInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.GetUserInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    openId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.GetUserInfoRequest}
 */
proto.login.GetUserInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.GetUserInfoRequest;
  return proto.login.GetUserInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.GetUserInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.GetUserInfoRequest}
 */
proto.login.GetUserInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.GetUserInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetUserInfoRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.GetUserInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetUserInfoRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getOpenId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 app_id = 1;
 * @return {number}
 */
proto.login.GetUserInfoRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.GetUserInfoRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.login.GetUserInfoRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.GetUserInfoRequest.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string open_id = 3;
 * @return {string}
 */
proto.login.GetUserInfoRequest.prototype.getOpenId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.GetUserInfoRequest.prototype.setOpenId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.GetUserInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.GetUserInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.GetUserInfoResponse.displayName = 'proto.login.GetUserInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.GetUserInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.GetUserInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.GetUserInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.GetUserInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userNick: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    openId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    gold: jspb.Message.getFieldWithDefault(msg, 6, 0),
    exp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    level: jspb.Message.getFieldWithDefault(msg, 8, 0),
    battleCounts: jspb.Message.getFieldWithDefault(msg, 9, 0),
    battleWin: jspb.Message.getFieldWithDefault(msg, 10, 0),
    continueWin: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.GetUserInfoResponse}
 */
proto.login.GetUserInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.GetUserInfoResponse;
  return proto.login.GetUserInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.GetUserInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.GetUserInfoResponse}
 */
proto.login.GetUserInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserNick(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGold(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExp(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLevel(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattleCounts(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattleWin(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContinueWin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.GetUserInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetUserInfoResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.GetUserInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetUserInfoResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getUserNick();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getOpenId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getGold();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getExp();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getLevel();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = this.getBattleCounts();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = this.getBattleWin();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = this.getContinueWin();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.GetUserInfoResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.GetUserInfoResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 app_id = 2;
 * @return {number}
 */
proto.login.GetUserInfoResponse.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.GetUserInfoResponse.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string user_nick = 3;
 * @return {string}
 */
proto.login.GetUserInfoResponse.prototype.getUserNick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.GetUserInfoResponse.prototype.setUserNick = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string uid = 4;
 * @return {string}
 */
proto.login.GetUserInfoResponse.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.GetUserInfoResponse.prototype.setUid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string open_id = 5;
 * @return {string}
 */
proto.login.GetUserInfoResponse.prototype.getOpenId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.login.GetUserInfoResponse.prototype.setOpenId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 gold = 6;
 * @return {number}
 */
proto.login.GetUserInfoResponse.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.login.GetUserInfoResponse.prototype.setGold = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 exp = 7;
 * @return {number}
 */
proto.login.GetUserInfoResponse.prototype.getExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.login.GetUserInfoResponse.prototype.setExp = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 level = 8;
 * @return {number}
 */
proto.login.GetUserInfoResponse.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.login.GetUserInfoResponse.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 battle_counts = 9;
 * @return {number}
 */
proto.login.GetUserInfoResponse.prototype.getBattleCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.login.GetUserInfoResponse.prototype.setBattleCounts = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint32 battle_win = 10;
 * @return {number}
 */
proto.login.GetUserInfoResponse.prototype.getBattleWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.login.GetUserInfoResponse.prototype.setBattleWin = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional uint32 continue_win = 11;
 * @return {number}
 */
proto.login.GetUserInfoResponse.prototype.getContinueWin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.login.GetUserInfoResponse.prototype.setContinueWin = function(value) {
  jspb.Message.setField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.GetLoginGiftRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.GetLoginGiftRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.GetLoginGiftRequest.displayName = 'proto.login.GetLoginGiftRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.GetLoginGiftRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.GetLoginGiftRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.GetLoginGiftRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.GetLoginGiftRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    continueLogin: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.GetLoginGiftRequest}
 */
proto.login.GetLoginGiftRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.GetLoginGiftRequest;
  return proto.login.GetLoginGiftRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.GetLoginGiftRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.GetLoginGiftRequest}
 */
proto.login.GetLoginGiftRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContinueLogin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.GetLoginGiftRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetLoginGiftRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.GetLoginGiftRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetLoginGiftRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getContinueLogin();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.GetLoginGiftRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.GetLoginGiftRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.login.GetLoginGiftRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.GetLoginGiftRequest.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 continue_login = 3;
 * @return {number}
 */
proto.login.GetLoginGiftRequest.prototype.getContinueLogin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.GetLoginGiftRequest.prototype.setContinueLogin = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.GetLoginGiftResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.GetLoginGiftResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.GetLoginGiftResponse.displayName = 'proto.login.GetLoginGiftResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.GetLoginGiftResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.GetLoginGiftResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.GetLoginGiftResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.GetLoginGiftResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    continueLogin: jspb.Message.getFieldWithDefault(msg, 4, 0),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    num: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.GetLoginGiftResponse}
 */
proto.login.GetLoginGiftResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.GetLoginGiftResponse;
  return proto.login.GetLoginGiftResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.GetLoginGiftResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.GetLoginGiftResponse}
 */
proto.login.GetLoginGiftResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContinueLogin(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.GetLoginGiftResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetLoginGiftResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.GetLoginGiftResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetLoginGiftResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getContinueLogin();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getType();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getNum();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.GetLoginGiftResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.GetLoginGiftResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 app_id = 2;
 * @return {number}
 */
proto.login.GetLoginGiftResponse.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.GetLoginGiftResponse.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string uid = 3;
 * @return {string}
 */
proto.login.GetLoginGiftResponse.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.GetLoginGiftResponse.prototype.setUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 continue_login = 4;
 * @return {number}
 */
proto.login.GetLoginGiftResponse.prototype.getContinueLogin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.GetLoginGiftResponse.prototype.setContinueLogin = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 type = 5;
 * @return {number}
 */
proto.login.GetLoginGiftResponse.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.login.GetLoginGiftResponse.prototype.setType = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 num = 6;
 * @return {number}
 */
proto.login.GetLoginGiftResponse.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.login.GetLoginGiftResponse.prototype.setNum = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.BuyShopItemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.BuyShopItemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.BuyShopItemRequest.displayName = 'proto.login.BuyShopItemRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.BuyShopItemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.BuyShopItemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.BuyShopItemRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.BuyShopItemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    itemid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cost: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.BuyShopItemRequest}
 */
proto.login.BuyShopItemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.BuyShopItemRequest;
  return proto.login.BuyShopItemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.BuyShopItemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.BuyShopItemRequest}
 */
proto.login.BuyShopItemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setItemid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.BuyShopItemRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.BuyShopItemRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.BuyShopItemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.BuyShopItemRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getItemid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getCost();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.BuyShopItemRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.BuyShopItemRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.login.BuyShopItemRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.BuyShopItemRequest.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 itemID = 3;
 * @return {number}
 */
proto.login.BuyShopItemRequest.prototype.getItemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.BuyShopItemRequest.prototype.setItemid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 cost = 4;
 * @return {number}
 */
proto.login.BuyShopItemRequest.prototype.getCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.BuyShopItemRequest.prototype.setCost = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.BuyShopItemResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.BuyShopItemResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.BuyShopItemResponse.displayName = 'proto.login.BuyShopItemResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.BuyShopItemResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.BuyShopItemResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.BuyShopItemResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.BuyShopItemResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    itemid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cost: jspb.Message.getFieldWithDefault(msg, 5, 0),
    costType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    rewardType: jspb.Message.getFieldWithDefault(msg, 7, 0),
    num: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.BuyShopItemResponse}
 */
proto.login.BuyShopItemResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.BuyShopItemResponse;
  return proto.login.BuyShopItemResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.BuyShopItemResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.BuyShopItemResponse}
 */
proto.login.BuyShopItemResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setItemid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCost(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCostType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRewardType(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.BuyShopItemResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.BuyShopItemResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.BuyShopItemResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.BuyShopItemResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getItemid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getCost();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getCostType();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getRewardType();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getNum();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.BuyShopItemResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.BuyShopItemResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 app_id = 2;
 * @return {number}
 */
proto.login.BuyShopItemResponse.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.BuyShopItemResponse.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string uid = 3;
 * @return {string}
 */
proto.login.BuyShopItemResponse.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.BuyShopItemResponse.prototype.setUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 itemID = 4;
 * @return {number}
 */
proto.login.BuyShopItemResponse.prototype.getItemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.BuyShopItemResponse.prototype.setItemid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 cost = 5;
 * @return {number}
 */
proto.login.BuyShopItemResponse.prototype.getCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.login.BuyShopItemResponse.prototype.setCost = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 cost_type = 6;
 * @return {number}
 */
proto.login.BuyShopItemResponse.prototype.getCostType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.login.BuyShopItemResponse.prototype.setCostType = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 reward_type = 7;
 * @return {number}
 */
proto.login.BuyShopItemResponse.prototype.getRewardType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.login.BuyShopItemResponse.prototype.setRewardType = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 num = 8;
 * @return {number}
 */
proto.login.BuyShopItemResponse.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.login.BuyShopItemResponse.prototype.setNum = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.GetMailListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.GetMailListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.GetMailListRequest.displayName = 'proto.login.GetMailListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.GetMailListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.GetMailListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.GetMailListRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.GetMailListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.GetMailListRequest}
 */
proto.login.GetMailListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.GetMailListRequest;
  return proto.login.GetMailListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.GetMailListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.GetMailListRequest}
 */
proto.login.GetMailListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.GetMailListRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetMailListRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.GetMailListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetMailListRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.GetMailListRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.GetMailListRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.login.GetMailListRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.GetMailListRequest.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.GetMailListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.GetMailListResponse.repeatedFields_, null);
};
goog.inherits(proto.login.GetMailListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.GetMailListResponse.displayName = 'proto.login.GetMailListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.GetMailListResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.GetMailListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.GetMailListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.GetMailListResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.GetMailListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mailListList: jspb.Message.toObjectList(msg.getMailListList(),
    proto.login.GetMailListResponse.MailData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.GetMailListResponse}
 */
proto.login.GetMailListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.GetMailListResponse;
  return proto.login.GetMailListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.GetMailListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.GetMailListResponse}
 */
proto.login.GetMailListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 4:
      var value = new proto.login.GetMailListResponse.MailData;
      reader.readMessage(value,proto.login.GetMailListResponse.MailData.deserializeBinaryFromReader);
      msg.addMailList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.GetMailListResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetMailListResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.GetMailListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetMailListResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getMailListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.login.GetMailListResponse.MailData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.GetMailListResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.GetMailListResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 app_id = 2;
 * @return {number}
 */
proto.login.GetMailListResponse.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.GetMailListResponse.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string uid = 3;
 * @return {string}
 */
proto.login.GetMailListResponse.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.GetMailListResponse.prototype.setUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated MailData mail_list = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.login.GetMailListResponse.MailData>}
 */
proto.login.GetMailListResponse.prototype.getMailListList = function() {
  return /** @type{!Array.<!proto.login.GetMailListResponse.MailData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.login.GetMailListResponse.MailData, 4));
};


/** @param {!Array.<!proto.login.GetMailListResponse.MailData>} value */
proto.login.GetMailListResponse.prototype.setMailListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.login.GetMailListResponse.MailData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.login.GetMailListResponse.MailData}
 */
proto.login.GetMailListResponse.prototype.addMailList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.login.GetMailListResponse.MailData, opt_index);
};


proto.login.GetMailListResponse.prototype.clearMailListList = function() {
  this.setMailListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.GetMailListResponse.MailData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.GetMailListResponse.MailData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.GetMailListResponse.MailData.displayName = 'proto.login.GetMailListResponse.MailData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.GetMailListResponse.MailData.prototype.toObject = function(opt_includeInstance) {
  return proto.login.GetMailListResponse.MailData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.GetMailListResponse.MailData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.GetMailListResponse.MailData.toObject = function(includeInstance, msg) {
  var f, obj = {
    mailId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fromUid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fromName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fromFaceUrl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    title: jspb.Message.getFieldWithDefault(msg, 5, ""),
    content: jspb.Message.getFieldWithDefault(msg, 6, ""),
    rewardList: jspb.Message.getFieldWithDefault(msg, 7, ""),
    recycleLeftSec: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.GetMailListResponse.MailData}
 */
proto.login.GetMailListResponse.MailData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.GetMailListResponse.MailData;
  return proto.login.GetMailListResponse.MailData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.GetMailListResponse.MailData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.GetMailListResponse.MailData}
 */
proto.login.GetMailListResponse.MailData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMailId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromUid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromFaceUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRewardList(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRecycleLeftSec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.GetMailListResponse.MailData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetMailListResponse.MailData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.GetMailListResponse.MailData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetMailListResponse.MailData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMailId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getFromUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getFromName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getFromFaceUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getContent();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getRewardList();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getRecycleLeftSec();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional uint32 mail_id = 1;
 * @return {number}
 */
proto.login.GetMailListResponse.MailData.prototype.getMailId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.GetMailListResponse.MailData.prototype.setMailId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string from_uid = 2;
 * @return {string}
 */
proto.login.GetMailListResponse.MailData.prototype.getFromUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.GetMailListResponse.MailData.prototype.setFromUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string from_name = 3;
 * @return {string}
 */
proto.login.GetMailListResponse.MailData.prototype.getFromName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.GetMailListResponse.MailData.prototype.setFromName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string from_face_url = 4;
 * @return {string}
 */
proto.login.GetMailListResponse.MailData.prototype.getFromFaceUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.GetMailListResponse.MailData.prototype.setFromFaceUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string title = 5;
 * @return {string}
 */
proto.login.GetMailListResponse.MailData.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.login.GetMailListResponse.MailData.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string content = 6;
 * @return {string}
 */
proto.login.GetMailListResponse.MailData.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.login.GetMailListResponse.MailData.prototype.setContent = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string reward_list = 7;
 * @return {string}
 */
proto.login.GetMailListResponse.MailData.prototype.getRewardList = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.login.GetMailListResponse.MailData.prototype.setRewardList = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 recycle_left_sec = 8;
 * @return {number}
 */
proto.login.GetMailListResponse.MailData.prototype.getRecycleLeftSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.login.GetMailListResponse.MailData.prototype.setRecycleLeftSec = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.GetMailRewardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.GetMailRewardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.GetMailRewardRequest.displayName = 'proto.login.GetMailRewardRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.GetMailRewardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.GetMailRewardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.GetMailRewardRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.GetMailRewardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mailId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.GetMailRewardRequest}
 */
proto.login.GetMailRewardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.GetMailRewardRequest;
  return proto.login.GetMailRewardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.GetMailRewardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.GetMailRewardRequest}
 */
proto.login.GetMailRewardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMailId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.GetMailRewardRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetMailRewardRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.GetMailRewardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetMailRewardRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getMailId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.GetMailRewardRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.GetMailRewardRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.login.GetMailRewardRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.GetMailRewardRequest.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 mail_id = 3;
 * @return {number}
 */
proto.login.GetMailRewardRequest.prototype.getMailId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.GetMailRewardRequest.prototype.setMailId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.GetMailRewardResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.GetMailRewardResponse.repeatedFields_, null);
};
goog.inherits(proto.login.GetMailRewardResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.GetMailRewardResponse.displayName = 'proto.login.GetMailRewardResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.GetMailRewardResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.GetMailRewardResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.GetMailRewardResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.GetMailRewardResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.GetMailRewardResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    rewardListList: jspb.Message.toObjectList(msg.getRewardListList(),
    proto.login.GetMailRewardResponse.RewardData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.GetMailRewardResponse}
 */
proto.login.GetMailRewardResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.GetMailRewardResponse;
  return proto.login.GetMailRewardResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.GetMailRewardResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.GetMailRewardResponse}
 */
proto.login.GetMailRewardResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 4:
      var value = new proto.login.GetMailRewardResponse.RewardData;
      reader.readMessage(value,proto.login.GetMailRewardResponse.RewardData.deserializeBinaryFromReader);
      msg.addRewardList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.GetMailRewardResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetMailRewardResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.GetMailRewardResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetMailRewardResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getRewardListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.login.GetMailRewardResponse.RewardData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.GetMailRewardResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.GetMailRewardResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 app_id = 2;
 * @return {number}
 */
proto.login.GetMailRewardResponse.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.GetMailRewardResponse.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string uid = 3;
 * @return {string}
 */
proto.login.GetMailRewardResponse.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.GetMailRewardResponse.prototype.setUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated RewardData reward_list = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.login.GetMailRewardResponse.RewardData>}
 */
proto.login.GetMailRewardResponse.prototype.getRewardListList = function() {
  return /** @type{!Array.<!proto.login.GetMailRewardResponse.RewardData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.login.GetMailRewardResponse.RewardData, 4));
};


/** @param {!Array.<!proto.login.GetMailRewardResponse.RewardData>} value */
proto.login.GetMailRewardResponse.prototype.setRewardListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.login.GetMailRewardResponse.RewardData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.login.GetMailRewardResponse.RewardData}
 */
proto.login.GetMailRewardResponse.prototype.addRewardList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.login.GetMailRewardResponse.RewardData, opt_index);
};


proto.login.GetMailRewardResponse.prototype.clearRewardListList = function() {
  this.setRewardListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.GetMailRewardResponse.RewardData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.GetMailRewardResponse.RewardData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.GetMailRewardResponse.RewardData.displayName = 'proto.login.GetMailRewardResponse.RewardData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.GetMailRewardResponse.RewardData.prototype.toObject = function(opt_includeInstance) {
  return proto.login.GetMailRewardResponse.RewardData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.GetMailRewardResponse.RewardData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.GetMailRewardResponse.RewardData.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.GetMailRewardResponse.RewardData}
 */
proto.login.GetMailRewardResponse.RewardData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.GetMailRewardResponse.RewardData;
  return proto.login.GetMailRewardResponse.RewardData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.GetMailRewardResponse.RewardData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.GetMailRewardResponse.RewardData}
 */
proto.login.GetMailRewardResponse.RewardData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.GetMailRewardResponse.RewardData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetMailRewardResponse.RewardData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.GetMailRewardResponse.RewardData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetMailRewardResponse.RewardData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 type = 1;
 * @return {number}
 */
proto.login.GetMailRewardResponse.RewardData.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.GetMailRewardResponse.RewardData.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.login.GetMailRewardResponse.RewardData.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.GetMailRewardResponse.RewardData.prototype.setCount = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.SendOtherUserGiftRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.SendOtherUserGiftRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.SendOtherUserGiftRequest.displayName = 'proto.login.SendOtherUserGiftRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.SendOtherUserGiftRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.SendOtherUserGiftRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.SendOtherUserGiftRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.SendOtherUserGiftRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    toUid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    toOpenId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.SendOtherUserGiftRequest}
 */
proto.login.SendOtherUserGiftRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.SendOtherUserGiftRequest;
  return proto.login.SendOtherUserGiftRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.SendOtherUserGiftRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.SendOtherUserGiftRequest}
 */
proto.login.SendOtherUserGiftRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToUid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToOpenId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.SendOtherUserGiftRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.SendOtherUserGiftRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.SendOtherUserGiftRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.SendOtherUserGiftRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getToUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getToOpenId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.SendOtherUserGiftRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.SendOtherUserGiftRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.login.SendOtherUserGiftRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.SendOtherUserGiftRequest.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string to_uid = 3;
 * @return {string}
 */
proto.login.SendOtherUserGiftRequest.prototype.getToUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.SendOtherUserGiftRequest.prototype.setToUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string to_open_id = 4;
 * @return {string}
 */
proto.login.SendOtherUserGiftRequest.prototype.getToOpenId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.SendOtherUserGiftRequest.prototype.setToOpenId = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.SendOtherUserGiftResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.SendOtherUserGiftResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.SendOtherUserGiftResponse.displayName = 'proto.login.SendOtherUserGiftResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.SendOtherUserGiftResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.SendOtherUserGiftResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.SendOtherUserGiftResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.SendOtherUserGiftResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.SendOtherUserGiftResponse}
 */
proto.login.SendOtherUserGiftResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.SendOtherUserGiftResponse;
  return proto.login.SendOtherUserGiftResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.SendOtherUserGiftResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.SendOtherUserGiftResponse}
 */
proto.login.SendOtherUserGiftResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.SendOtherUserGiftResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.SendOtherUserGiftResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.SendOtherUserGiftResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.SendOtherUserGiftResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.SendOtherUserGiftResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.SendOtherUserGiftResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.GetSendGiftCDListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.GetSendGiftCDListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.GetSendGiftCDListRequest.displayName = 'proto.login.GetSendGiftCDListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.GetSendGiftCDListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.GetSendGiftCDListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.GetSendGiftCDListRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.GetSendGiftCDListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.GetSendGiftCDListRequest}
 */
proto.login.GetSendGiftCDListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.GetSendGiftCDListRequest;
  return proto.login.GetSendGiftCDListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.GetSendGiftCDListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.GetSendGiftCDListRequest}
 */
proto.login.GetSendGiftCDListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.GetSendGiftCDListRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetSendGiftCDListRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.GetSendGiftCDListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetSendGiftCDListRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 app_id = 1;
 * @return {number}
 */
proto.login.GetSendGiftCDListRequest.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.GetSendGiftCDListRequest.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.login.GetSendGiftCDListRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.GetSendGiftCDListRequest.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.GetSendGiftCDListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.GetSendGiftCDListResponse.repeatedFields_, null);
};
goog.inherits(proto.login.GetSendGiftCDListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.GetSendGiftCDListResponse.displayName = 'proto.login.GetSendGiftCDListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.GetSendGiftCDListResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.GetSendGiftCDListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.GetSendGiftCDListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.GetSendGiftCDListResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.GetSendGiftCDListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    appId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sendCdListList: jspb.Message.toObjectList(msg.getSendCdListList(),
    proto.login.GetSendGiftCDListResponse.SendGiftCDData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.GetSendGiftCDListResponse}
 */
proto.login.GetSendGiftCDListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.GetSendGiftCDListResponse;
  return proto.login.GetSendGiftCDListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.GetSendGiftCDListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.GetSendGiftCDListResponse}
 */
proto.login.GetSendGiftCDListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAppId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 4:
      var value = new proto.login.GetSendGiftCDListResponse.SendGiftCDData;
      reader.readMessage(value,proto.login.GetSendGiftCDListResponse.SendGiftCDData.deserializeBinaryFromReader);
      msg.addSendCdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.GetSendGiftCDListResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetSendGiftCDListResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.GetSendGiftCDListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetSendGiftCDListResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getAppId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getSendCdListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.login.GetSendGiftCDListResponse.SendGiftCDData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.GetSendGiftCDListResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.GetSendGiftCDListResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 app_id = 2;
 * @return {number}
 */
proto.login.GetSendGiftCDListResponse.prototype.getAppId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.GetSendGiftCDListResponse.prototype.setAppId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string uid = 3;
 * @return {string}
 */
proto.login.GetSendGiftCDListResponse.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.GetSendGiftCDListResponse.prototype.setUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated SendGiftCDData send_cd_list = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.login.GetSendGiftCDListResponse.SendGiftCDData>}
 */
proto.login.GetSendGiftCDListResponse.prototype.getSendCdListList = function() {
  return /** @type{!Array.<!proto.login.GetSendGiftCDListResponse.SendGiftCDData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.login.GetSendGiftCDListResponse.SendGiftCDData, 4));
};


/** @param {!Array.<!proto.login.GetSendGiftCDListResponse.SendGiftCDData>} value */
proto.login.GetSendGiftCDListResponse.prototype.setSendCdListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.login.GetSendGiftCDListResponse.SendGiftCDData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.login.GetSendGiftCDListResponse.SendGiftCDData}
 */
proto.login.GetSendGiftCDListResponse.prototype.addSendCdList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.login.GetSendGiftCDListResponse.SendGiftCDData, opt_index);
};


proto.login.GetSendGiftCDListResponse.prototype.clearSendCdListList = function() {
  this.setSendCdListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.GetSendGiftCDListResponse.SendGiftCDData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.GetSendGiftCDListResponse.SendGiftCDData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.GetSendGiftCDListResponse.SendGiftCDData.displayName = 'proto.login.GetSendGiftCDListResponse.SendGiftCDData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.GetSendGiftCDListResponse.SendGiftCDData.prototype.toObject = function(opt_includeInstance) {
  return proto.login.GetSendGiftCDListResponse.SendGiftCDData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.GetSendGiftCDListResponse.SendGiftCDData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.GetSendGiftCDListResponse.SendGiftCDData.toObject = function(includeInstance, msg) {
  var f, obj = {
    toUid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    leftsec: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.GetSendGiftCDListResponse.SendGiftCDData}
 */
proto.login.GetSendGiftCDListResponse.SendGiftCDData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.GetSendGiftCDListResponse.SendGiftCDData;
  return proto.login.GetSendGiftCDListResponse.SendGiftCDData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.GetSendGiftCDListResponse.SendGiftCDData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.GetSendGiftCDListResponse.SendGiftCDData}
 */
proto.login.GetSendGiftCDListResponse.SendGiftCDData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLeftsec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.GetSendGiftCDListResponse.SendGiftCDData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetSendGiftCDListResponse.SendGiftCDData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.GetSendGiftCDListResponse.SendGiftCDData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.GetSendGiftCDListResponse.SendGiftCDData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getToUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getLeftsec();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string to_uid = 1;
 * @return {string}
 */
proto.login.GetSendGiftCDListResponse.SendGiftCDData.prototype.getToUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.login.GetSendGiftCDListResponse.SendGiftCDData.prototype.setToUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 leftSec = 2;
 * @return {number}
 */
proto.login.GetSendGiftCDListResponse.SendGiftCDData.prototype.getLeftsec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.GetSendGiftCDListResponse.SendGiftCDData.prototype.setLeftsec = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.ExistRoomW2WResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.ExistRoomW2WResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.ExistRoomW2WResponse.displayName = 'proto.login.ExistRoomW2WResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.ExistRoomW2WResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.ExistRoomW2WResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.ExistRoomW2WResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.ExistRoomW2WResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.ExistRoomW2WResponse}
 */
proto.login.ExistRoomW2WResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.ExistRoomW2WResponse;
  return proto.login.ExistRoomW2WResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.ExistRoomW2WResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.ExistRoomW2WResponse}
 */
proto.login.ExistRoomW2WResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.ExistRoomW2WResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.ExistRoomW2WResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.ExistRoomW2WResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.ExistRoomW2WResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.ExistRoomW2WResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.ExistRoomW2WResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.ExistRoomWebRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.ExistRoomWebRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.ExistRoomWebRequest.displayName = 'proto.login.ExistRoomWebRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.ExistRoomWebRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.ExistRoomWebRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.ExistRoomWebRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.ExistRoomWebRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.ExistRoomWebRequest}
 */
proto.login.ExistRoomWebRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.ExistRoomWebRequest;
  return proto.login.ExistRoomWebRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.ExistRoomWebRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.ExistRoomWebRequest}
 */
proto.login.ExistRoomWebRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.ExistRoomWebRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.ExistRoomWebRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.ExistRoomWebRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.ExistRoomWebRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRoomId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 room_id = 1;
 * @return {number}
 */
proto.login.ExistRoomWebRequest.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.ExistRoomWebRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.ExistRoomWebResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.ExistRoomWebResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.ExistRoomWebResponse.displayName = 'proto.login.ExistRoomWebResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.ExistRoomWebResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.ExistRoomWebResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.ExistRoomWebResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.ExistRoomWebResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.ExistRoomWebResponse}
 */
proto.login.ExistRoomWebResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.ExistRoomWebResponse;
  return proto.login.ExistRoomWebResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.ExistRoomWebResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.ExistRoomWebResponse}
 */
proto.login.ExistRoomWebResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.ExistRoomWebResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.ExistRoomWebResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.ExistRoomWebResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.ExistRoomWebResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFlag();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool flag = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.login.ExistRoomWebResponse.prototype.getFlag = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.login.ExistRoomWebResponse.prototype.setFlag = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.MyCacRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.MyCacRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.MyCacRoom.displayName = 'proto.login.MyCacRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.MyCacRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.login.MyCacRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.MyCacRoom} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.MyCacRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    cacId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cacTitle: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.MyCacRoom}
 */
proto.login.MyCacRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.MyCacRoom;
  return proto.login.MyCacRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.MyCacRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.MyCacRoom}
 */
proto.login.MyCacRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCacId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCacTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.MyCacRoom} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.MyCacRoom.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.MyCacRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.MyCacRoom.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCacId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getCacTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 cac_id = 1;
 * @return {number}
 */
proto.login.MyCacRoom.prototype.getCacId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.MyCacRoom.prototype.setCacId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string cac_title = 2;
 * @return {string}
 */
proto.login.MyCacRoom.prototype.getCacTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.MyCacRoom.prototype.setCacTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CacRoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CacRoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CacRoomInfo.displayName = 'proto.login.CacRoomInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CacRoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CacRoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CacRoomInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CacRoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    cacId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gameName: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cacTitle: jspb.Message.getFieldWithDefault(msg, 4, ""),
    cacDesc: jspb.Message.getFieldWithDefault(msg, 5, ""),
    showId: jspb.Message.getFieldWithDefault(msg, 6, 0),
    inGame: jspb.Message.getFieldWithDefault(msg, 7, 0),
    usedRoom: jspb.Message.getFieldWithDefault(msg, 8, 0),
    surplusRoom: jspb.Message.getFieldWithDefault(msg, 9, 0),
    state: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CacRoomInfo}
 */
proto.login.CacRoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CacRoomInfo;
  return proto.login.CacRoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CacRoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CacRoomInfo}
 */
proto.login.CacRoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCacId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCacTitle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCacDesc(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setShowId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInGame(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUsedRoom(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSurplusRoom(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CacRoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CacRoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCacId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getGameName();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getCacTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getCacDesc();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getShowId();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getInGame();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getUsedRoom();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = this.getSurplusRoom();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = this.getState();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional uint32 cac_id = 1;
 * @return {number}
 */
proto.login.CacRoomInfo.prototype.getCacId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CacRoomInfo.prototype.setCacId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 game_id = 2;
 * @return {number}
 */
proto.login.CacRoomInfo.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.CacRoomInfo.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 game_name = 3;
 * @return {number}
 */
proto.login.CacRoomInfo.prototype.getGameName = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.CacRoomInfo.prototype.setGameName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string cac_title = 4;
 * @return {string}
 */
proto.login.CacRoomInfo.prototype.getCacTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.CacRoomInfo.prototype.setCacTitle = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string cac_desc = 5;
 * @return {string}
 */
proto.login.CacRoomInfo.prototype.getCacDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.login.CacRoomInfo.prototype.setCacDesc = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 show_id = 6;
 * @return {number}
 */
proto.login.CacRoomInfo.prototype.getShowId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.login.CacRoomInfo.prototype.setShowId = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 in_game = 7;
 * @return {number}
 */
proto.login.CacRoomInfo.prototype.getInGame = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.login.CacRoomInfo.prototype.setInGame = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 used_room = 8;
 * @return {number}
 */
proto.login.CacRoomInfo.prototype.getUsedRoom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.login.CacRoomInfo.prototype.setUsedRoom = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 surplus_room = 9;
 * @return {number}
 */
proto.login.CacRoomInfo.prototype.getSurplusRoom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.login.CacRoomInfo.prototype.setSurplusRoom = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint32 state = 10;
 * @return {number}
 */
proto.login.CacRoomInfo.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.login.CacRoomInfo.prototype.setState = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CacRoomStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CacRoomStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CacRoomStateRequest.displayName = 'proto.login.CacRoomStateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CacRoomStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CacRoomStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CacRoomStateRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CacRoomStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    aid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CacRoomStateRequest}
 */
proto.login.CacRoomStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CacRoomStateRequest;
  return proto.login.CacRoomStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CacRoomStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CacRoomStateRequest}
 */
proto.login.CacRoomStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CacRoomStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomStateRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CacRoomStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomStateRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 aid = 1;
 * @return {number}
 */
proto.login.CacRoomStateRequest.prototype.getAid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CacRoomStateRequest.prototype.setAid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CacRoomStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CacRoomStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CacRoomStateResponse.displayName = 'proto.login.CacRoomStateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CacRoomStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CacRoomStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CacRoomStateResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CacRoomStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    playerNum: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gold: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CacRoomStateResponse}
 */
proto.login.CacRoomStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CacRoomStateResponse;
  return proto.login.CacRoomStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CacRoomStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CacRoomStateResponse}
 */
proto.login.CacRoomStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayerNum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CacRoomStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomStateResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CacRoomStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomStateResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getState();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getPlayerNum();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getGold();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.CacRoomStateResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CacRoomStateResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 state = 2;
 * @return {number}
 */
proto.login.CacRoomStateResponse.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.CacRoomStateResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 player_num = 3;
 * @return {number}
 */
proto.login.CacRoomStateResponse.prototype.getPlayerNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.CacRoomStateResponse.prototype.setPlayerNum = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 gold = 4;
 * @return {number}
 */
proto.login.CacRoomStateResponse.prototype.getGold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.CacRoomStateResponse.prototype.setGold = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.MyCacRoomListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.MyCacRoomListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.MyCacRoomListRequest.displayName = 'proto.login.MyCacRoomListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.MyCacRoomListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.MyCacRoomListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.MyCacRoomListRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.MyCacRoomListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    aid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.MyCacRoomListRequest}
 */
proto.login.MyCacRoomListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.MyCacRoomListRequest;
  return proto.login.MyCacRoomListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.MyCacRoomListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.MyCacRoomListRequest}
 */
proto.login.MyCacRoomListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.MyCacRoomListRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.MyCacRoomListRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.MyCacRoomListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.MyCacRoomListRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 aid = 1;
 * @return {number}
 */
proto.login.MyCacRoomListRequest.prototype.getAid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.MyCacRoomListRequest.prototype.setAid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.MyCacRoomListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.MyCacRoomListResponse.repeatedFields_, null);
};
goog.inherits(proto.login.MyCacRoomListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.MyCacRoomListResponse.displayName = 'proto.login.MyCacRoomListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.MyCacRoomListResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.MyCacRoomListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.MyCacRoomListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.MyCacRoomListResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.MyCacRoomListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    myCacRoomList: jspb.Message.toObjectList(msg.getMyCacRoomList(),
    proto.login.MyCacRoom.toObject, includeInstance),
    cacRoomInfo: (f = msg.getCacRoomInfo()) && proto.login.CacRoomInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.MyCacRoomListResponse}
 */
proto.login.MyCacRoomListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.MyCacRoomListResponse;
  return proto.login.MyCacRoomListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.MyCacRoomListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.MyCacRoomListResponse}
 */
proto.login.MyCacRoomListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.login.MyCacRoom;
      reader.readMessage(value,proto.login.MyCacRoom.deserializeBinaryFromReader);
      msg.addMyCacRoom(value);
      break;
    case 3:
      var value = new proto.login.CacRoomInfo;
      reader.readMessage(value,proto.login.CacRoomInfo.deserializeBinaryFromReader);
      msg.setCacRoomInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.MyCacRoomListResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.MyCacRoomListResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.MyCacRoomListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.MyCacRoomListResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getMyCacRoomList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.login.MyCacRoom.serializeBinaryToWriter
    );
  }
  f = this.getCacRoomInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.login.CacRoomInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.MyCacRoomListResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.MyCacRoomListResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated MyCacRoom my_cac_room = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.login.MyCacRoom>}
 */
proto.login.MyCacRoomListResponse.prototype.getMyCacRoomList = function() {
  return /** @type{!Array.<!proto.login.MyCacRoom>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.login.MyCacRoom, 2));
};


/** @param {!Array.<!proto.login.MyCacRoom>} value */
proto.login.MyCacRoomListResponse.prototype.setMyCacRoomList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.login.MyCacRoom=} opt_value
 * @param {number=} opt_index
 * @return {!proto.login.MyCacRoom}
 */
proto.login.MyCacRoomListResponse.prototype.addMyCacRoom = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.login.MyCacRoom, opt_index);
};


proto.login.MyCacRoomListResponse.prototype.clearMyCacRoomList = function() {
  this.setMyCacRoomList([]);
};


/**
 * optional CacRoomInfo cac_room_info = 3;
 * @return {?proto.login.CacRoomInfo}
 */
proto.login.MyCacRoomListResponse.prototype.getCacRoomInfo = function() {
  return /** @type{?proto.login.CacRoomInfo} */ (
    jspb.Message.getWrapperField(this, proto.login.CacRoomInfo, 3));
};


/** @param {?proto.login.CacRoomInfo|undefined} value */
proto.login.MyCacRoomListResponse.prototype.setCacRoomInfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.login.MyCacRoomListResponse.prototype.clearCacRoomInfo = function() {
  this.setCacRoomInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.login.MyCacRoomListResponse.prototype.hasCacRoomInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CacRoomInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CacRoomInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CacRoomInfoRequest.displayName = 'proto.login.CacRoomInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CacRoomInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CacRoomInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CacRoomInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CacRoomInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cacId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CacRoomInfoRequest}
 */
proto.login.CacRoomInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CacRoomInfoRequest;
  return proto.login.CacRoomInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CacRoomInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CacRoomInfoRequest}
 */
proto.login.CacRoomInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCacId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CacRoomInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomInfoRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CacRoomInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomInfoRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCacId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 cac_id = 1;
 * @return {number}
 */
proto.login.CacRoomInfoRequest.prototype.getCacId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CacRoomInfoRequest.prototype.setCacId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.login.CacRoomInfoRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.login.CacRoomInfoRequest.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CacRoomInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CacRoomInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CacRoomInfoResponse.displayName = 'proto.login.CacRoomInfoResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CacRoomInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CacRoomInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CacRoomInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CacRoomInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cacRoomInfo: (f = msg.getCacRoomInfo()) && proto.login.CacRoomInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CacRoomInfoResponse}
 */
proto.login.CacRoomInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CacRoomInfoResponse;
  return proto.login.CacRoomInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CacRoomInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CacRoomInfoResponse}
 */
proto.login.CacRoomInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.login.CacRoomInfo;
      reader.readMessage(value,proto.login.CacRoomInfo.deserializeBinaryFromReader);
      msg.setCacRoomInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CacRoomInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomInfoResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CacRoomInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomInfoResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getCacRoomInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.login.CacRoomInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.CacRoomInfoResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CacRoomInfoResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional CacRoomInfo cac_room_info = 2;
 * @return {?proto.login.CacRoomInfo}
 */
proto.login.CacRoomInfoResponse.prototype.getCacRoomInfo = function() {
  return /** @type{?proto.login.CacRoomInfo} */ (
    jspb.Message.getWrapperField(this, proto.login.CacRoomInfo, 2));
};


/** @param {?proto.login.CacRoomInfo|undefined} value */
proto.login.CacRoomInfoResponse.prototype.setCacRoomInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.login.CacRoomInfoResponse.prototype.clearCacRoomInfo = function() {
  this.setCacRoomInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.login.CacRoomInfoResponse.prototype.hasCacRoomInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CreateCacRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CreateCacRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CreateCacRoomRequest.displayName = 'proto.login.CreateCacRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CreateCacRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CreateCacRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CreateCacRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CreateCacRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    aid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    beginNum: jspb.Message.getFieldWithDefault(msg, 3, 0),
    roomConf: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CreateCacRoomRequest}
 */
proto.login.CreateCacRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CreateCacRoomRequest;
  return proto.login.CreateCacRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CreateCacRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CreateCacRoomRequest}
 */
proto.login.CreateCacRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBeginNum(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomConf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CreateCacRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CreateCacRoomRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CreateCacRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CreateCacRoomRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getGameId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getBeginNum();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getRoomConf();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 aid = 1;
 * @return {number}
 */
proto.login.CreateCacRoomRequest.prototype.getAid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CreateCacRoomRequest.prototype.setAid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 game_id = 2;
 * @return {number}
 */
proto.login.CreateCacRoomRequest.prototype.getGameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.CreateCacRoomRequest.prototype.setGameId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 begin_num = 3;
 * @return {number}
 */
proto.login.CreateCacRoomRequest.prototype.getBeginNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.login.CreateCacRoomRequest.prototype.setBeginNum = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string room_conf = 4;
 * @return {string}
 */
proto.login.CreateCacRoomRequest.prototype.getRoomConf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.login.CreateCacRoomRequest.prototype.setRoomConf = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CreateCacRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CreateCacRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CreateCacRoomResponse.displayName = 'proto.login.CreateCacRoomResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CreateCacRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CreateCacRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CreateCacRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CreateCacRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cacId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CreateCacRoomResponse}
 */
proto.login.CreateCacRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CreateCacRoomResponse;
  return proto.login.CreateCacRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CreateCacRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CreateCacRoomResponse}
 */
proto.login.CreateCacRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCacId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CreateCacRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CreateCacRoomResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CreateCacRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CreateCacRoomResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getCacId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.CreateCacRoomResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CreateCacRoomResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 cac_id = 2;
 * @return {number}
 */
proto.login.CreateCacRoomResponse.prototype.getCacId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.CreateCacRoomResponse.prototype.setCacId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.JoinCacRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.JoinCacRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.JoinCacRequest.displayName = 'proto.login.JoinCacRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.JoinCacRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.JoinCacRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.JoinCacRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.JoinCacRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    aid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cacId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.JoinCacRequest}
 */
proto.login.JoinCacRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.JoinCacRequest;
  return proto.login.JoinCacRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.JoinCacRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.JoinCacRequest}
 */
proto.login.JoinCacRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCacId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.JoinCacRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.JoinCacRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.JoinCacRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.JoinCacRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getCacId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 aid = 1;
 * @return {number}
 */
proto.login.JoinCacRequest.prototype.getAid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.JoinCacRequest.prototype.setAid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 cac_id = 2;
 * @return {number}
 */
proto.login.JoinCacRequest.prototype.getCacId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.JoinCacRequest.prototype.setCacId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.JoinCacResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.JoinCacResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.JoinCacResponse.displayName = 'proto.login.JoinCacResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.JoinCacResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.JoinCacResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.JoinCacResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.JoinCacResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverIp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    serverPort: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.JoinCacResponse}
 */
proto.login.JoinCacResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.JoinCacResponse;
  return proto.login.JoinCacResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.JoinCacResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.JoinCacResponse}
 */
proto.login.JoinCacResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRoomId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServerPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.JoinCacResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.JoinCacResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.JoinCacResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.JoinCacResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getServerIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getServerPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.JoinCacResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.JoinCacResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 room_id = 2;
 * @return {number}
 */
proto.login.JoinCacResponse.prototype.getRoomId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.login.JoinCacResponse.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string server_ip = 3;
 * @return {string}
 */
proto.login.JoinCacResponse.prototype.getServerIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.login.JoinCacResponse.prototype.setServerIp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 server_port = 4;
 * @return {number}
 */
proto.login.JoinCacResponse.prototype.getServerPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.login.JoinCacResponse.prototype.setServerPort = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CacRecordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CacRecordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CacRecordRequest.displayName = 'proto.login.CacRecordRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CacRecordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CacRecordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CacRecordRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CacRecordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cacId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CacRecordRequest}
 */
proto.login.CacRecordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CacRecordRequest;
  return proto.login.CacRecordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CacRecordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CacRecordRequest}
 */
proto.login.CacRecordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCacId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CacRecordRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRecordRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CacRecordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRecordRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCacId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 cac_id = 1;
 * @return {number}
 */
proto.login.CacRecordRequest.prototype.getCacId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CacRecordRequest.prototype.setCacId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CacRecordResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.CacRecordResponse.repeatedFields_, null);
};
goog.inherits(proto.login.CacRecordResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CacRecordResponse.displayName = 'proto.login.CacRecordResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.CacRecordResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CacRecordResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CacRecordResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CacRecordResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CacRecordResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roomItemList: jspb.Message.toObjectList(msg.getRoomItemList(),
    proto.login.RoomItemData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CacRecordResponse}
 */
proto.login.CacRecordResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CacRecordResponse;
  return proto.login.CacRecordResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CacRecordResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CacRecordResponse}
 */
proto.login.CacRecordResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.login.RoomItemData;
      reader.readMessage(value,proto.login.RoomItemData.deserializeBinaryFromReader);
      msg.addRoomItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CacRecordResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRecordResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CacRecordResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRecordResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getRoomItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.login.RoomItemData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.CacRecordResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CacRecordResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated RoomItemData room_item = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.login.RoomItemData>}
 */
proto.login.CacRecordResponse.prototype.getRoomItemList = function() {
  return /** @type{!Array.<!proto.login.RoomItemData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.login.RoomItemData, 2));
};


/** @param {!Array.<!proto.login.RoomItemData>} value */
proto.login.CacRecordResponse.prototype.setRoomItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.login.RoomItemData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.login.RoomItemData}
 */
proto.login.CacRecordResponse.prototype.addRoomItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.login.RoomItemData, opt_index);
};


proto.login.CacRecordResponse.prototype.clearRoomItemList = function() {
  this.setRoomItemList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CacRoomListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.login.CacRoomListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CacRoomListRequest.displayName = 'proto.login.CacRoomListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CacRoomListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CacRoomListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CacRoomListRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CacRoomListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    aid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CacRoomListRequest}
 */
proto.login.CacRoomListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CacRoomListRequest;
  return proto.login.CacRoomListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CacRoomListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CacRoomListRequest}
 */
proto.login.CacRoomListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CacRoomListRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomListRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CacRoomListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomListRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 aid = 1;
 * @return {number}
 */
proto.login.CacRoomListRequest.prototype.getAid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CacRoomListRequest.prototype.setAid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.login.CacRoomListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.login.CacRoomListResponse.repeatedFields_, null);
};
goog.inherits(proto.login.CacRoomListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.login.CacRoomListResponse.displayName = 'proto.login.CacRoomListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.login.CacRoomListResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.login.CacRoomListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.login.CacRoomListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.login.CacRoomListResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.login.CacRoomListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cacRoomInfoList: jspb.Message.toObjectList(msg.getCacRoomInfoList(),
    proto.login.CacRoomInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.login.CacRoomListResponse}
 */
proto.login.CacRoomListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.login.CacRoomListResponse;
  return proto.login.CacRoomListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.login.CacRoomListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.login.CacRoomListResponse}
 */
proto.login.CacRoomListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = new proto.login.CacRoomInfo;
      reader.readMessage(value,proto.login.CacRoomInfo.deserializeBinaryFromReader);
      msg.addCacRoomInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.login.CacRoomListResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomListResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.login.CacRoomListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.login.CacRoomListResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getCacRoomInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.login.CacRoomInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.login.CacRoomListResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.login.CacRoomListResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated CacRoomInfo cac_room_info = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.login.CacRoomInfo>}
 */
proto.login.CacRoomListResponse.prototype.getCacRoomInfoList = function() {
  return /** @type{!Array.<!proto.login.CacRoomInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.login.CacRoomInfo, 2));
};


/** @param {!Array.<!proto.login.CacRoomInfo>} value */
proto.login.CacRoomListResponse.prototype.setCacRoomInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.login.CacRoomInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.login.CacRoomInfo}
 */
proto.login.CacRoomListResponse.prototype.addCacRoomInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.login.CacRoomInfo, opt_index);
};


proto.login.CacRoomListResponse.prototype.clearCacRoomInfoList = function() {
  this.setCacRoomInfoList([]);
};


